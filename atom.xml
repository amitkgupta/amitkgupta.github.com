<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[[LEGACY] Amit's Blog]]></title>
  <link href="http://legacy-blog.akgupta.ca/atom.xml" rel="self"/>
  <link href="http://legacy-blog.akgupta.ca/"/>
  <updated>2017-04-09T20:10:07-07:00</updated>
  <id>http://legacy-blog.akgupta.ca/</id>
  <author>
    <name><![CDATA[Amit Kumar Gupta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Is programming math? You're asking the wrong question. Part 2]]></title>
    <link href="http://legacy-blog.akgupta.ca/blog/2014/07/19/is-math-programming-youre-asking-the-wrong-question-part-2/"/>
    <updated>2014-07-19T23:21:00-07:00</updated>
    <id>http://legacy-blog.akgupta.ca/blog/2014/07/19/is-math-programming-youre-asking-the-wrong-question-part-2</id>
    <content type="html"><![CDATA[<p>In <a href="http://legacy-blog.akgupta.ca/blog/2014/07/19/is-math-programming-youre-asking-the-wrong-question-part-1/">Part 1</a> I started to address <a href="https://twitter.com/sarahmei">Sarah Mei</a>'s recent blog post about how <a href="http://www.sarahmei.com/blog/2014/07/15/programming-is-not-math/">programming is not math</a>. In this post, I'll continue my critique of her article and highlight the ways in which math can be valuable to a programmer.</p>
<h2 id="understanding-math-to-understand-programming-problems">Understanding math to understand programming problems</h2>
<p>In her article, Sarah attacks the claim that &quot;without a mathematical foundation, you’ll have only a surface understanding of programming&quot; by first reducing it to an alleged &quot;common variation&quot; of the same sentiment: &quot;without a CS degree, you can’t build anything substantial.&quot; But wait, those aren't the same thing at all. <!--more--></p>
<h4 id="moving-the-goalposts">Moving the Goalposts</h4>
<p>I can argue that a mathematical foundation can help give you a deep, valuable understanding of certain programming problems. No one can argue that you need math to build anything of substance. Especially if &quot;substance&quot; is correlated with VC funding. <del>Yes, you can build &quot;Yo!&quot; without a deep understanding of anything.</del> Worthwhile endeavours and opportunities for gainful employment abound, which don't require understanding much math, or any deep understanding of the programming problems at hand.</p>
<p>She has a point when she says &quot;computer science is not programming&quot;. Yes. But understanding some math, and mathy computer science concepts, can certainly be valuable when it comes to reasoning about a programming problem, and communicating that reasoning with your collaborators.</p>
<p>Here's an example from something I was working on recently. We were building an appliance for our enterprise clients, to streamline the process of deploying <a href="https://www.gopivotal.com/platform-as-a-service/cloud-foundry">Cloud Foundry</a> to their on-premise datacenters. Users would enter configuration, including an IP subnet in CIDR notation and a set of blacklisted IP ranges in a format like <code>10.10.0.0-10.10.0.15, 10.10.0.129-10.10.0.255</code>. They would then select and configure any number of distributed services to be deployed, such as the Cloud Foundry PaaS, an add-on MySQL DBaaS cluster, and let's say a <a href="http://www.gopivotal.com/big-data/pivotal-hd">Pivotal HD</a> Hadoop cluster. Our appliance would spin up VMs on which to run these services, assigning IPs to these VMs within the given subnet, but outside the blacklist.</p>
<p>Everything was fine and dandy, until a field rep told us that one of his customers was experiencing some really slow performance. We noticed that they were using a <code>/16</code> subnet. First off, tell me that a solid confidence and facility with numbers doesn't make understanding <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_blocks">CIDR blocks</a> a walk in the park. Anyways, after some debugging we traced the problem to some code that looked like this:</p>
<div class='bogus-wrapper'>
<notextile>
<figure class='code'><figcaption>
<span></span>
</figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">IpPool</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">subnet</span><span class="p">,</span> <span class="n">blacklist</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@subnet</span> <span class="o">=</span> <span class="n">subnet</span>           <span class="c1"># eg. NetAddr::CIDR.create(&#39;192.168.1.1/24&#39;)</span>
</span><span class='line'>      <span class="vi">@ips</span> <span class="o">=</span> <span class="n">subnet</span><span class="o">.</span><span class="n">enumerate</span>    <span class="c1"># an Array of strings representing IPs in the subnet</span>
</span><span class='line'>      <span class="vi">@blacklist</span> <span class="o">=</span> <span class="n">blacklist</span>     <span class="c1"># an Array of strings representing IPs to avoid using</span>
</span><span class='line'>      <span class="vi">@taken_ips</span> <span class="o">=</span> <span class="p">{}</span>               <span class="c1"># a Hash of ip:String =&gt; purpose:String pairs</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">### snip ###</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">def</span> <span class="nf">find_or_take_ips_for_job</span><span class="p">(</span><span class="n">job</span><span class="p">,</span> <span class="n">num_ips</span><span class="p">)</span>
</span><span class='line'>      <span class="n">already_taken_ips</span> <span class="o">=</span> <span class="vi">@taken_ips</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">_ip</span><span class="p">,</span><span class="n">purpose</span><span class="o">|</span> <span class="n">purpose</span> <span class="o">==</span> <span class="n">job</span> <span class="p">}</span><span class="o">.</span><span class="n">keys</span>
</span><span class='line'>      <span class="n">result</span> <span class="o">=</span> <span class="n">already_taken_ips</span>
</span><span class='line'>      
</span><span class='line'>      <span class="p">(</span><span class="n">num_ips</span> <span class="o">-</span> <span class="n">already_taken_ips</span><span class="o">.</span><span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>          <span class="k">if</span> <span class="n">next_ip</span> <span class="o">=</span> <span class="n">next_available_ip</span>
</span><span class='line'>              <span class="vi">@taken_ips</span><span class="o">[</span><span class="n">next_ip</span><span class="o">]</span> <span class="o">=</span> <span class="n">job</span>
</span><span class='line'>              <span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="n">next_ip</span>
</span><span class='line'>          <span class="k">else</span>
</span><span class='line'>              <span class="k">raise</span> <span class="no">AvailableIpNotFoundError</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">result</span><span class="o">.</span><span class="n">first</span><span class="p">(</span><span class="n">num_ips</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">next_available_ip</span>
</span><span class='line'>      <span class="vi">@ips</span><span class="o">.</span><span class="n">find</span> <span class="p">{</span> <span class="o">|</span><span class="n">ip</span><span class="o">|</span> <span class="o">!</span><span class="vi">@blacklist</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">ip</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="vi">@taken_ips</span><span class="o">.</span><span class="n">has_key?</span><span class="p">(</span><span class="n">ip</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>
</notextile>
</div>

<p>Actually, it was a fair bit more complicated than that. Because this code was being called by something that was first looping over all already-installed products and hydrating the IP pool, then then looping over all the yet-to-be-installed products to determine what IPs to assign for each of its jobs. For each product, it had to loop over each job that comprises that product and find-or-take IPs from the pool depending on how many VMs it would be running.</p>
<p>My pair and I were able to reason through this problem and communicate with each other by breaking down the runtime complexity of the problem in terms of big O. Having the training of thinking about problems in that way helped. Having a common language within which to frame the problem, a language that's precise and unambiguous, really helped. I'm not saying the problem in any way <em>requires</em> familiarity with runtime analysis and big O notation. But just imagine what two people with no exposure to these things would go through when reasoning about this problem and communicating with each other. Then appreciate <strong>how much friction just disappears</strong> if those two collaborators knew this stuff.</p>
<p>The fix?</p>
<div class='bogus-wrapper'>
<notextile>
<figure class='code'><figcaption>
<span></span>
</figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">next_available_ip</span>
</span><span class='line'>  <span class="p">(</span><span class="vi">@ips</span> <span class="o">-</span> <span class="vi">@blacklist</span><span class="p">)</span><span class="o">.</span><span class="n">find</span> <span class="p">{</span> <span class="o">|</span><span class="n">ip</span><span class="o">|</span> <span class="o">!</span><span class="vi">@taken_ips</span><span class="o">.</span><span class="n">has_key?</span><span class="p">(</span><span class="n">ip</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>
</notextile>
</div>

<p>When <span class="math"><em>n</em> = 2<sup>16</sup></span>, an <span class="math"><em>O</em>(<em>n</em><sup>2</sup>) → <em>O</em>(<em>n</em>)</span> improvement is significant. Calculations that were taking many hours (or rather, hitting the nginx timeout and never finishing) in the worst case were now being done in a couple of seconds at most!</p>
<p>As evidence for the claim that understanding math doesn't help much with understanding programming, Sarah cites her experience: &quot;I have found little connection between a person’s formal qualifications and the depth of their understanding.&quot;</p>
<h4 id="stawman-argument">Stawman Argument</h4>
<p>Formal qualifications and understanding math are <em>not</em> the same thing! She talks specifically about big O in this context. So here's a challenge: amongst all your colleagues, think about the ones who have limited formal education (e.g. early college dropout) but whom you admire for their skills and passion for solving hard and interesting problems. Now amongst those folks, find one who doesn't get big O notation or who doesn't care to think about runtime analysis. Can you even find one?</p>
<p>I think the example above and the two examples in Part 1 all show how a mathematical approach can certainly help you better understand and tackle certain problems that come up, even in your day-to-day, non-mathy work. Here's yet another example: <a href="http://blog.gopivotal.com/cloud-foundry-pivotal/products/app-placement-in-cloud-foundry-diego-a-classical-optimization-problem">Using the framework of classical optimization theory to understand the problem of designing a PaaS to schedule resources for running user applications in a highly available manner</a>.</p>
<h2 id="learning-math-to-improve-how-you-approach-programming-problems">Learning math to improve how you approach programming problems</h2>
<p>You'll often hear that even if you don't use math as a programmer, math teaches you abstract thinking and problem solving, and you need that for programming. Sarah retorts: &quot;learning to program is more like learning a new language than it is like doing math problems.&quot;</p>
<h4 id="another-strawman-argument">Another Strawman Argument</h4>
<p>Doing math problems is not the same as learning math. And there's <em>so much more</em> to learning math than learning calculus, matrix arithmetic, a bit of graph theory and some combinatorics. Especially in America, the state of modern math education in college is quite poor for the vast majority of students. What they're exposed to is excessively computational (doing problems vs. learning), centuries old, and severely limited in both breadth and depth.</p>
<p>So, what about <em>learning</em> math? Is there something special about it that helps someone learn programming later on? Absolutely. First off:</p>
<blockquote>
<p>Doing math is about taking abstract and unfamiliar concepts and bodies of knowledge, and internalizing them by building mental models so that they feel concrete and familiar, often by building upon existing mental models, so that you can pose conjectures and prove assertions about these concepts.</p>
</blockquote>
<p>You can try to say that this description could apply to other fields, but there's no field for which this is as fitting a description as it is for math. This habit of building mental models to understand the unfamiliar and make it concrete is something I use every time I'm introduced to a new problem domain. And I use the word &quot;habit&quot; deliberately, because it's not that you need math to be able to do this, it's that learning math necessitates making this a habitual part of your thinking process.</p>
<p>Furthermore, because so much of math is so abstract:</p>
<blockquote>
<p>Doing math develops tenacity -- the confidence that things which seem entirely opaque to you know can eventually be learned and understood in a way that seems clear through patience and effort.</p>
</blockquote>
<p>I came to programming knowing nothing. I didn't know the difference between Java and JavaScript. I didn't know about GET, POST, PUT, DELETE. I had hardly used Unix. I'd never heard of &quot;client-server&quot;. Didn't know a thing about networks, IaaS, virtualization, databases, etc. My head would be throbbing after work every day for my first few weeks as I was being flooded with knowledge. And I would come in to work the next day and notice that a lot of the stuff from the previous day had leaked out overnight.</p>
<p>But that was okay. I could tell myself, there's no way this stuff is more abstract than combinatorial characterizations of compactness and incompactness of the second uncountable cardinal, the stuff I never wrote my thesis about. It took several months, but I was eventually able to penetrate those concepts in set-theory enough to start (but not finish, obviously) being productive. These programming concepts? Just give me a few weeks and I can be productive there too.</p>
<p>The ability to feel comfortable while having absolutely no clue what you're doing is something I take out of my time devoted to learning math. Again, math is not the only path to this goal. I feel that any artistic practice where the creations take a long time to take shape, be it drawing, sculpture, literature, etc. all develop the same sort of confidence. But math is at least one way to achieve it. And when it comes to programming, it certainly helps that math, much more so than art, requires a fairly similar &quot;type&quot; of thinking to programming.</p>
<p>That all said, I do see some merit in Sarah's analogy with learning a new language, but it depends on where the challenges come from in your programming career. If your challenges come from tackling harder and more ambitious problems in new and unfamiliar domains, learning math is more helpful. But as a Rails consultant, that's not where the challenge comes from. The challenge comes from finding clearer, more elegant, and more robust ways to express solutions to familiar problems. On one end of the spectrum, there's the person who can hack together a functioning Rails app, and on the other end there are people like Sarah. You get to be like Sarah by getting good at modelling things clearly, writing clean, maintainable code, and communicating effectively through your code and in real life with your peers. In that case, the analogy to learning and getting better at a new language is quite illustrative.</p>
<h2 id="summary">Summary</h2>
<p>No matter where you are in your career as a programmer or what problem domain or business vertical you work on, there is value to knowing math, thinking mathematically, and experiencing the process of learning math. Knowing math adds a powerful set of tools to your toolbelt. It won't be the right tool for <em>every</em> task, but that's true of any tool. You know the old chestnut about hammers and nails. That said, there will undoubtedly be times that an application of math will be the best tool for the job, where that &quot;job&quot; could mean optimizing, designing, debugging, experimenting, or anything else.</p>
<p>Thinking in terms of mathematics, and in terms of those mathy concepts from computer science, can sometimes provide an incredibly productive way to reason about a particular programming problem. Furthmore, the precise nature of mathematics often makes it an ideal way to communicate about a particular programming problem, especially when all your collaborators are familiar with the language.</p>
<p>Finally, the process of learning math (real math, not multiplying matrices) is a great way to build habits and attitudes towards problem solving that transfer readily to programming.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Is programming math? You're asking the wrong question. Part 1]]></title>
    <link href="http://legacy-blog.akgupta.ca/blog/2014/07/19/is-math-programming-youre-asking-the-wrong-question-part-1/"/>
    <updated>2014-07-19T15:33:00-07:00</updated>
    <id>http://legacy-blog.akgupta.ca/blog/2014/07/19/is-math-programming-youre-asking-the-wrong-question-part-1</id>
    <content type="html"><![CDATA[<p>A couple days ago, my former colleague <a href="https://twitter.com/sarahmei">Sarah Mei</a> trolled nerds everywhere, claiming <a href="http://www.sarahmei.com/blog/2014/07/15/programming-is-not-math/">programming is not math</a>. In her post, she argues that the value proffered to a programmer by learning/knowing/doing math is greatly diminished compared to what widely held beliefs about math and programming would suggest. In particular, she claims that:</p>
<ol type="1">
<li>Most developers don't require any applications of math in nearly all of the problems they need to solve.</li>
<li>Understanding math-flavoured concepts from computer science, such as big O analysis, has little correlation with a solid understanding of the problems most developers need to solve.</li>
<li>While programmers do require abstract thinking and problem solving skills, there is nothing special about math as a way to develop these skills.</li>
</ol>
<p>So the question that's truly of interest here is not whether programming <em>is</em> math, but</p>
<blockquote>
<p>In what ways, and to what extent, does learning and knowing math and computer science help programmers solve problems? <!--more--></p>
</blockquote>
<p>In fairness to Sarah, her post is indeed about this more interesting question, the title of her post is just clickbait. In fairness, so is the title of this post.</p>
<p>While I agree with some of Sarah's points, there are flaws in her arguments. I plan to critique some of those arguments, and then shed some light on the question of interest from my perspective as an almost-mathematician-turned-software-engineer. In this post, I'll address claim 1, and in <a href="http://legacy-blog.akgupta.ca/blog/2014/07/19/is-math-programming-youre-asking-the-wrong-question-part-2/">Part 2</a> I'll address 2 and 3.</p>
<h2 id="applying-math-to-solve-programming-problems">Applying math to solve programming problems</h2>
<p>Sarah asserts that &quot;the vast majority of developer jobs only required middle-school math at the most.&quot; There's a couple problems I see with this:</p>
<h4 id="biased-sample">Biased Sample</h4>
<p>Sarah does acknowledge the possibility she simply wasn't seeing the jobs that required more math than that, but doesn't take that possibility to its logical conclusion. And it's perfectly understandable. Sarah spent many years as a consultant, working predominantly with Rails and JavaScript, and teaching clients the Agile Way. Now she teaches Rails and JavaScript to newcomers.</p>
<p>If you have Rails, JavaScript, and Agile on your resume, and you're a relative novice to these things, you will be inundated with messages from recruiters<sup><a href="#lpt">+</a></sup> at various companies who all need you to solve roughly the same class of problems, a class of problems that usually requires very little math. If you're as talented and experienced as Sarah, I can only imagine. What you will undoubtedly see is that there <strong>a ton</strong> of job openings like this that don't require much math. What that evidence does not bear out is the conclusion that the <em>vast majority</em> of jobs are like this.</p>
<p>What about finance, supply chain management, graphics, game engine programming, machine learning, and signal processing, just to name a few? In his <a href="http://j2kun.svbtle.com/programming-is-not-math-huh">response</a> to Sarah's post, <a href="https://twitter.com/jeremyjkun">Jeremy Kun</a> expounds on several of the &quot;mind-bogglingly widespread applications of mathematics to industry.&quot; I recommend checking it out.</p>
<p><span style="font-size:60%"><a name="lpt">+</a>Pro Tip: If you need a job, and don't mind working on the next Facebook/Pinterest/Instagram for dogs/seniors/snowboarders, then 1. Learn Rails and JS, 2. Profit.</span></p>
<h4 id="red-herring">Red Herring</h4>
<p>Sarah talks about the math that is <em>required</em> for those jobs. Math may not be <em>required</em> for many jobs, but are there applications of math that allow you to solve problems in a better way than simply what's required? That's the real question. I'm going to get to a couple examples in just a second, but the gist is:</p>
<ul>
<li>The more math you know, the better.</li>
<li>There will be occasions where you can get by without it, but where an application of math is the absolute best tool for the job at hand.</li>
<li>Having math skills in your toolbelt gives you more options and approaches to solve whatever problem you might be faced with, be it design, debugging, experimentation, optimization, understanding someone else's code, etc.</li>
<li>Whereas some areas of the tech industry need very little math, there's no dearth of tech jobs where strong math skills are a major asset.</li>
</ul>
<p>I would liken it to knowing the power of raw SQL and how to roll your own queries vis-à-vis relying on an ORM for everything. Replace &quot;math skills&quot; with &quot;roll your own SQL&quot; in the statements above. The analogy is clear, with math simply being a bigger and more powerful set of skills than SQL.</p>
<h3 id="examples">Examples</h3>
<p>WARNING: There is actual math below, with equations and this thing: <span class="math">∑ <sub><em>k</em> = 1</sub><sup><em>N</em> − 1</sup></span>, and bipartite graphs and Pascal's Triangle. If you wish to continue reading about the merits of math but don't want to look at any math just now, do not pass this link, <a href="http://legacy-blog.akgupta.ca/blog/2014/07/19/is-math-programming-youre-asking-the-wrong-question-part-2/">go directly to Part 2: <span style="font-size:150%">☞</span></a></p>
<p>Otherwise, here's just a couple recent examples where I was working on implementing or testing a feature that had nothing to do with math, but was able to apply math to great effect.</p>
<h4 id="graph-theory-and-bdd-testing">Graph Theory and BDD Testing</h4>
<p>This first example is about using <a href="https://github.com/amitkgupta/goraph">pure graph theory</a> to improve a BDD testing framework for Golang. <a href="http://onsi.github.io/gomega/">Gomega</a> is a matcher library which often used along with the <a href="http://onsi.github.io/ginkgo/">Ginkgo</a> testing framework. Gomega allows you to make assertions like:</p>
<div class='bogus-wrapper'>
<notextile>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Expect(someCalculatedValue).Should(Equal(42))</span></code></pre></td></tr></table></div></figure>
</notextile>
</div>

<p>The <code>ConsistOf</code> matcher was recently added, allowing one to make assertions such as:</p>
<div class='bogus-wrapper'>
<notextile>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>someCalculatedValue := someFunction() // returns []int{1,1,2,3}
</span><span class='line'>Expect(someCalculatedValue).Should(ConsistOf(1,1,2,3))
</span><span class='line'>Expect(someCalculatedValue).Should(ConsistOf(2,1,3,1))
</span><span class='line'>Expect(someCalculatedValue).ShouldNot(ConsistOf(1,1,3,3))
</span><span class='line'>Expect(someCalculatedValue).ShouldNot(ConsistOf(1,2,3))</span></code></pre></td></tr></table></div></figure>
</notextile>
</div>

<p>It's useful when you want to say that some actual slice or array should look like some expected sequence of values, but the order doesn't matter. One of the features of this matcher is that it allows composition with other matchers. For instance, there's a <code>ContainElement</code> matcher which you can use like this:</p>
<div class='bogus-wrapper'>
<notextile>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Expect([]int{1,2,3}).Should(ContainElement(2))</span></code></pre></td></tr></table></div></figure>
</notextile>
</div>

<p>Now you can compose this with <code>ConsistOf</code> to make assertions like:</p>
<div class='bogus-wrapper'>
<notextile>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>x := []int{1, 2}
</span><span class='line'>y := []int{2, 3}
</span><span class='line'>
</span><span class='line'>Expect([][]int{x,y}).Should(ConsistOf(ContainElement(1), ContainElement(3)))</span></code></pre></td></tr></table></div></figure>
</notextile>
</div>

<p>The order of the sub-matchers shouldn't matter, so the following assertion should also pass:</p>
<div class='bogus-wrapper'>
<notextile>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Expect([][]int{x,y}).Should(ConsistOf(ContainElement(3), ContainElement(1)))</span></code></pre></td></tr></table></div></figure>
</notextile>
</div>

<p>and indeed it did. The problem arose when you had an assertion like this:</p>
<div class='bogus-wrapper'>
<notextile>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Expect([][]int{x,y}).Should(ConsistOf(ContainElement(2), ContainElement(1)))</span></code></pre></td></tr></table></div></figure>
</notextile>
</div>

<p>It should pass: <code>x</code> satisfies both sub-matchers, and <code>y</code> satisfies the first one. But it didn't. The problem is that the implementation of this matcher would look at the first sub-matcher, <code>ContainElement(2)</code>, and find the first element in the given slice that satisfied it, <code>x</code> in this case. At that point, <code>x</code> is no-longer available. Then it tries to find a match for the next sub-matcher, <code>ContainElement(1)</code>, and it only has one element to choose from, namely <code>y</code>. But <code>y</code> doesn't satisfy this, so it falsely reports a failure for the assertion.</p>
<p>What's the fix? Well, naively, you might consider going through every permutation of the input slice, and seeing if the <span class="math"><em>i</em><sup>th</sup></span> element of the (permuted) slice satisfies the <span class="math"><em>i</em><sup>th</sup></span> matcher. If, for some permutation, every element satisfies its corresponding matcher, then the assertion is marked as passing; else, it's a failure.</p>
<p>How bad is this approach? <span class="math"><em>O</em>(<em>n</em>!)</span> -- really bad. Graph theory to the rescue! Thanks to this <a href="http://cs.stackexchange.com/a/28429/20134">answer on cs.stackexchange.com</a>, I was able to find the <a href="https://en.wikipedia.org/wiki/Hopcroft%E2%80%93Karp_algorithm">Hopkroft-Karp algorithm</a> and apply it to this problem. It's runtime? <span class="math"><em>O</em>(<em>n</em><sup>2. 5</sup>)</span>, not bad at all compared to the original <span class="math"><em>O</em>(<em>n</em><sup>2</sup>)</span> implementation, and, more importantly, no false negatives!</p>
<p><img src="http://legacy-blog.akgupta.ca/images/bipartitegraph.jpeg"></img><br /><em><sub><sup>Source: http://www.mathworks.com/matlabcentral/fileexchange/screenshots/1307/original.jpg</sup></sub></em></p>
<p>Here's the idea. Model the problem as a bipartite graph, with the <span class="math"><em>n</em></span> elements of the actual array or slice on the left, and the <span class="math"><em>n</em></span> sub-matchers on the right. Do a pre-processing step of going through each pair of an element and a matcher (there's <span class="math"><em>n</em><sup>2</sup></span> such pairs), and connect the two vertices with an edge if that element satisfies that matcher. Then, use Hopkroft-Karp to do the hard work of determining if there is a way to choose exactly <span class="math"><em>n</em></span> edges so that each element on the left is paired with a unique matcher on the right, i.e. no two edges in this selection share a vertex. In the picture above, the bold edges represent an attempt to do this, except it was only able to find 3 edges. You can convince yourself that in that picture, there is a different way to choose 4 edges so that no two share a vertex, but not one that includes the 3 edges chosen so far.</p>
<h4 id="probability-theory-and-load-balancers">Probability Theory and Load Balancers</h4>
<p>I work on Cloud Foundry. It's a Platform-as-a-Service, so it let's SaaS developers push their source code, ask for <span class="math"><em>n</em></span> instances of the application to be run (in parallel, on separate servers), and then expose their app to their users on the web via a URL like <code>my-app.my-domain.com</code>, with the expectation that all traffic to that URL will be load-balanced across the <span class="math"><em>n</em></span> servers. I'm working on a team that's <a href="http://www.youtube.com/watch?v=1OkmVTFhfLY">rewriting much of Cloud Foundry in Go</a>. To test that our new code is working, we wanted to write a high-level system test which pushed an app, asked for 3 instances, and then make some requests to the app's URL and somehow assert that it eventually hit all 3 instances.</p>
<p>Now if the load balancer is doing its job and randomly but uniformly distributing load to all three servers, then there's some chance, albeit small, that even if you <code>curl</code> the endpoint 100 times, you'll never hit one of the app instances. In other words, even if the parts responsible for starting up 3 instances are working, and even if the parts responsible for keeping instances up and running (or restarting them quickly if they crash) are working, and even if the load balancer is being fair and balanced, there's some chance that you'll just happen to never hit one (or two) of those instances. A case like that would be a <em>false negative</em>.</p>
<p>So the question is, if I'm going to write a test that hits the app's endpoint in a <code>for</code> loop, how many times do I have to iterate to have 99.9% that I won't encounter a false negative. We want to be pretty sure that if this test ever fails in the future, it should be catching a real failure within the system.</p>
<p>The solution: let's solve for <span class="math"><em>N</em></span>, where <span class="math"><em>N</em></span> is the smallest integer where the probability of a false negative when hitting the endpoint <span class="math"><em>N</em></span> times at most 0.1%, or 0.001. Before reading further, take a guess as to what <span class="math"><em>N</em></span> might be. 5, 10, 100, 1000?</p>
<p>The probability of a false negative is equal to the number of ways a false negative can occur, divided by the total number of possible outcomes. Here, an &quot;outcome&quot; is a sequence of the <span class="math"><em>N</em></span> instance numbers hit when repeating the <code>curl</code>, e.g. if <span class="math"><em>N</em> = 14</span>, one possible outcome is <code>[1, 2, 2, 1, 1, 3, 3, 2, 1, 3, 2, 2, 1, 3]</code>. Clearly, there are <span class="math">3<sup><em>N</em></sup></span> total possible occurrences?</p>
<p>How many outcomes are false negatives? There's two kinds. The kind where you only ever hit one of the instances, so <code>[1, 1, ...]</code>, <code>[2, 2, ...]</code>, and <code>[3, 3, ...]</code>. There's just 3 of those. The other kind is where you only hit two of the three instances. So you either only hit 1 and 2, or only 2 and 3, or only 1 and 3. By symmetry, you can see that the number of outcomes for each of those three cases is the same, so let's just count one case and multiply by 3. How many ways to only hit 1 and 2? This means that you hit instance 1 somewhere between 1 and <span class="math"><em>N</em> − 1</span> times, and instance 2 the rest. Breaking it down further, for some <span class="math"><em>k</em></span> between 1 and <span class="math"><em>N</em> − 1</span>, how many outcomes involve hitting 1 <span class="math"><em>k</em></span> times, and hitting instance 2 <span class="math"><em>N</em> − <em>k</em></span> times? It's easy to see that it's just <span class="math">${N \choose k}$</span>. So the inequality we want to solve is:</p>
<p><br /><span class="math">$\frac{3 + 3\sum_{k=1}^{N-1}{N \choose k}}{3^N} \leq 0.001$</span><br /></p>
<p>Now here's something neat. We're almost looking at <span class="math">$\sum_{k=0}^{N}{N \choose k}$</span>, which you might recognize is the sum of the <span class="math"><em>N</em><sup>th</sup></span> row in <a href="http://en.wikipedia.org/wiki/Pascal&#39;s_triangle">Pascal's Triangle</a>. And that sum reduces to <span class="math">2<sup><em>N</em></sup></span> because given a set of size <span class="math"><em>N</em></span>, the number of ways to choose a subset of size <span class="math">0</span>, plus the number of ways to choose a subset of size <span class="math">1</span>, ..., plus the number of ways to choose a subset of size <span class="math"><em>N</em></span>, is simply the total number of ways to choose a subset. And an equivalent way to choose a subset is to look at each element and make the binary choice &quot;yes, you're in the subset&quot; or &quot;no, you're out&quot;, and there's <span class="math">2<sup><em>N</em></sup></span> ways to do that. This kind of argument is called a <a href="http://en.wikipedia.org/wiki/Combinatorial_proof">combinatorial argument</a>, where you prove two things are equal by showing that they represent two ways to count the same thing.</p>
<p><img src="http://legacy-blog.akgupta.ca/images/pascals-triangle.gif"></img><br /><em><sub><sup>Source: http://www.mathsisfun.com/images/pascals-triangle-4.gif</sup></sub></em></p>
<p>An alternative argument uses the <a href="http://en.wikipedia.org/wiki/Binomial_theorem">Binomial Theorem</a> and the observation that <span class="math">(1 + 1)<sup><em>N</em></sup> = 2<sup><em>N</em></sup></span>. At any rate, we get:</p>
<p><br /><span class="math">$\frac{3 + 3\cdot(2^N - {N \choose 0} - {N \choose N})}{3^N} \leq 0.001$</span><br /> <br /><span class="math">$\frac{2^N - 1}{3^{N-1}} \leq 0.001$</span><br /> <br /><span class="math"><em>N</em> = 20</span><br /></p>
<p>And that's indeed what we do. We <a href="https://github.com/cloudfoundry-incubator/inigo/blob/7ddcdbfbc259e79538a23deea73ded8eecfe5a00/helpers/route_helpers.go#L59-L86">poll 20 times</a>, and then <a href="https://github.com/cloudfoundry-incubator/inigo/blob/7ddcdbfbc259e79538a23deea73ded8eecfe5a00/lrp_consistency_test.go#L112-L126">assert that we see all 3 instances</a>. By the way, did you guess 20?</p>
<p>Before we move on, here's a question: what if we have more than 3 instances? Let's just say 4. The problem already gets <em>way</em> harder. The Pascal's Triangle trick no longer applies. How do you model the problem now? Well, <a href="https://github.com/amitkgupta/sampling_with_replacement">here's</a> one approach, and the pretty results:</p>
<p><img src="http://legacy-blog.akgupta.ca/images/sampling.png"></img></p>
<p>Now let's move on to <a href="http://legacy-blog.akgupta.ca/blog/2014/07/19/is-math-programming-youre-asking-the-wrong-question-part-2/">Part 2</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[k-NN Algorithm in Golang and Haskell]]></title>
    <link href="http://legacy-blog.akgupta.ca/blog/2014/06/21/k-nn-algorithm-in-golang-and-haskell/"/>
    <updated>2014-06-21T17:46:00-07:00</updated>
    <id>http://legacy-blog.akgupta.ca/blog/2014/06/21/k-nn-algorithm-in-golang-and-haskell</id>
    <content type="html"><![CDATA[<p>There's been a recent string of blog posts featuring implementations of the <a href="http://en.wikipedia.org/wiki/K-nearest_neighbors_algorithm">k-Nearest Neighbour algorithm</a> in several languages (for k = 1), and it's been cool to see how the solutions are expressed differently in different languages, as well as the vast differences in performance. The k-Nearest Neighbour algorithm is cool in itself, it's a dead simple technique for classifying (or labelling) a collection of observed data by searching the previously observed collections of data whose classifications/labels are already known, and finding the one which most nearly resembles our not-yet-classified collection (for some definition of &quot;nearly resembles&quot;). It's an example of a <a href="http://en.wikipedia.org/wiki/Machine_learning">machine learning</a> classification algorithm, one of those things that lives in the fun intersection of math and programming.</p>
<p>We're gonna take a look at a concrete application of the k-NN algorithm, compare the performance of the implementations from those aforementioned blog posts with new implementations in <a href="http://golang.org">Golang</a> and <a href="http://www.haskell.org/">Haskell</a>, and take a look at an optimized version which takes a logical shortcut and also leverages Golang's built-in support for <a href="http://www.golang-book.com/10/index.htm">concurrency</a>.</p>
<p>All the code and datasets can be found on <a href="https://github.com/amitkgupta/nearest_neighbour">Github</a>. The Golang and Haskell code is also at the bottom of this post.</p>
<p><strong>TL;DR</strong>: Golang wins, or, in honor of the World Cup: <strong><em>GOOOOOOOOOOLLLLLLLang!!!</em></strong></p>
<!--more-->

<h2 id="the-problem">The problem</h2>
<p>In this particular example, we've got 5000 pixelated (28x28) greyscale (0-255) &quot;drawings&quot; of the digits 0 through 9. Some of them might look like this:</p>
<figure>
<img src="https://onlinecourses.science.psu.edu/stat857/sites/onlinecourses.science.psu.edu.stat857/files/image_01.png" />
</figure>
<p><em><sub><sup>Source: https://onlinecourses.science.psu.edu/stat857/node/186</sup></sub></em></p>
<p>These 5000 digit drawings constitute our <strong>training set</strong>. We're then given a bunch of new drawings where (let's pretend for a moment) we don't know what digits they're supposed to represent, but we know the greyscale values at each pixel. Given any such unclassified drawing, our goal is to make a reasonable guess as to what digit it's supposed to represent. The way this algorithm works is to find the drawing in the training set which most nearly resembles our unclassified drawing, then our reasonable guess is that the unclassified drawing in question represents the same digit as the nearest drawing in the training set. At this point, we can say that we've <strong>classified</strong> our previously unclassified drawing.</p>
<p>But what does &quot;nearly resemble&quot; mean in this case? Roughly, we want to look at how different a pair of drawings is, pixel by pixel, and aggregate those differences for all the pixels. The smaller the aggregate pixel difference, the nearer the resemblance. The standard measure of distance here is the Euclidean metric: Given two vectors <span class="math"><em>x⃗</em>, <em>y⃗</em></span> of length <span class="math">28 × 28 = 784</span> consisting of 8-bit unsigned integers <span class="math">0…255</span>, we define their distance to be:</p>
<p><br /><span class="math">$d(\vec{x}, \vec{y}) = \sqrt{\sum_{i=0}^{783} (x_i - y_i)^2}$</span><br /></p>
<p>In this problem we're given 500 drawings to classify, and they form our <strong>validation set</strong>. After running the algorithm against all 500, we can see what percentage of them we classified correctly (because we actually are given their labels, we just pretend not to know them when doing the classification), and how long it took to do them all.</p>
<p>The data is given to us as a couple of CSV files, one for the training set, one for the validation set. Each row corresponds to a drawing. The first column is the label (i.e. what digit the drawing represent), and the next 784 columns are the greyscale values of each pixel in the drawing.</p>
<p>Note that the above describes the k-Nearest Neighbour classification in the case <span class="math"><em>k</em> = 1</span>. If we wanted to do it for <span class="math"><em>k</em> &gt; 0</span>, we would take an unclassified drawing and find the <span class="math"><em>k</em></span> nearest drawings in the training set, and then classify the drawing according to whichever digit is represented most amongst those <span class="math"><em>k</em></span> nearest drawings.</p>
<h2 id="blog-chain">Blog Chain</h2>
<p>This post inspired by a chain of blog posts, each of which contains implementations of the algorithm in a different language (or two). All the implementations are <em>naive</em>, in that they pretty much do the simplest thing possible, and take hardly any shortcuts to speed up or skip calculations:</p>
<ul>
<li><a href="http://re-factor.blogspot.ca/2014/06/comparing-k-nn-in-factor.html">The most recent one</a> implemented it in <a href="http://factorcode.org/">Factor</a></li>
<li><a href="http://huonw.github.io/2014/06/10/knn-rust.html">The one before that</a> did it in <a href="http://www.rust-lang.org/">Rust</a>.<br /></li>
<li>That one was inspired by <a href="http://philtomson.github.io/blog/2014/05/29/comparing-a-machine-learning-algorithm-implemented-in-f-number-and-ocaml/">a blog post</a> which had it in <a href="http://fsharp.org/">F#</a> and <a href="http://ocaml.org/">OCaml</a>, and <a href="http://philtomson.github.io/blog/2014/05/30/stop-the-presses-ocaml-wins/">a follow-up</a> which improves the first OCaml implementation.</li>
</ul>
<p>I work for <a href="http://www.gopivotal.com/">Pivotal</a> on the <a href="http://cloudfoundry.org/index.html">Cloud Foundry</a> project and recently joined the <a href="https://www.youtube.com/watch?v=1OkmVTFhfLY">Diego</a> team where I was introduced to Golang. I thought it'd be fun to add naive and optimized implementations in Golang to the comparison. Then I came across an <a href="http://learnyouahaskell.com/">awesome primer on Haskell</a> so the incomparable <a href="https://twitter.com/alexsuraci">@alexsuraci</a> and I paired on adding Haskell to the mix.</p>
<h2 id="comparison">Comparison</h2>
<p>Performance comparisons between the naive implementations in each language were performed on a freshly spun up c3.xlarge EC2 instance as follows:</p>
<ol type="1">
<li>Install Golang, Haskell, Rust, F#, and OCaml. Download Factor.</li>
<li>Write the (naive) code for Golang and Haskell. Copy-paste the code for Rust, F#, OCaml, and Factor.</li>
<li>Compile executables for Haskell, Rust, F#, and OCaml.</li>
<li>Run and time the executables with <code>time ./&lt;executable-name&gt;</code>. Run the Golang code with <code>time go run golang-k-nn.go</code>. Run the Factor code in the <code>scratchpad</code> REPL with <code>[k-nn] time</code>.</li>
</ol>
<h3 id="results">Results</h3>
<ol type="1">
<li>Golang: 4.701s</li>
<li>Factor: 6.358s</li>
<li>OCaml: 12.757s</li>
<li>F#: 23.507s</li>
<li>Rust: 78.138s</li>
<li>Haskell: 91.581s</li>
</ol>
<h4 id="golang">Golang</h4>
<div class='bogus-wrapper'>
<notextile>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ time go run golang-k-nn.go
</span><span class='line'>
</span><span class='line'>0.944
</span><span class='line'>
</span><span class='line'>real  0m4.701s
</span><span class='line'>user  0m4.582s
</span><span class='line'>sys   0m0.136s</span></code></pre></td></tr></table></div></figure>
</notextile>
</div>

<h4 id="haskell">Haskell</h4>
<div class='bogus-wrapper'>
<notextile>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ time ./haskell-k-nn
</span><span class='line'>
</span><span class='line'>Percentage correct: 472
</span><span class='line'>
</span><span class='line'>real  1m31.581s
</span><span class='line'>user  1m29.191s
</span><span class='line'>sys   0m2.384s</span></code></pre></td></tr></table></div></figure>
</notextile>
</div>

<h4 id="rust">Rust</h4>
<div class='bogus-wrapper'>
<notextile>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ time ./rust-k-nn
</span><span class='line'>
</span><span class='line'>Percentage correct: 94.4%
</span><span class='line'>
</span><span class='line'>real  1m18.138s
</span><span class='line'>user  1m17.980s
</span><span class='line'>sys       0m0.155s</span></code></pre></td></tr></table></div></figure>
</notextile>
</div>

<h4 id="f">F#</h4>
<div class='bogus-wrapper'>
<notextile>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ time ./fsharp-k-nn.exe
</span><span class='line'>
</span><span class='line'>start...
</span><span class='line'>Percentage correct:94.400000
</span><span class='line'>
</span><span class='line'>real  0m23.507s
</span><span class='line'>user  0m22.751s
</span><span class='line'>sys       0m0.798s</span></code></pre></td></tr></table></div></figure>
</notextile>
</div>

<h4 id="ocaml">OCaml</h4>
<div class='bogus-wrapper'>
<notextile>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ time ./ocaml-k-nn
</span><span class='line'>
</span><span class='line'>Percentage correct:94.400000
</span><span class='line'>
</span><span class='line'>real  0m12.757s
</span><span class='line'>user  0m12.500s
</span><span class='line'>sys       0m0.257s</span></code></pre></td></tr></table></div></figure>
</notextile>
</div>

<h4 id="factor">Factor</h4>
<div class='bogus-wrapper'>
<notextile>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir -p $FACTOR_HOME/work/k-nn
</span><span class='line'>$ cp factor/factor-k-nn.factor $FACTOR_HOME/work/k-nn
</span><span class='line'>$ cp *.csv $FACTOR_HOME/work/k-nn
</span><span class='line'>$ $FACTOR_HOME/factor
</span><span class='line'>
</span><span class='line'>IN: scratchpad USE: factor-k-nn
</span><span class='line'>Loading resource:work/k-nn/factor-k-nn.factor
</span><span class='line'>Loading resource:basis/formatting/formatting.factor
</span><span class='line'>Loading resource:basis/formatting/formatting-docs.factor
</span><span class='line'>
</span><span class='line'>IN: scratchpad gc [ k-nn ] time
</span><span class='line'>Percentage correct: 94.400000
</span><span class='line'>Running time: 6.357621145 seconds</span></code></pre></td></tr></table></div></figure>
</notextile>
</div>

<h2 id="optimized-implementation-in-golang">Optimized implementation in Golang</h2>
<p>The Golang implementation gets a major performance boost involves two optimizations:</p>
<ol type="1">
<li>Short-circuit distance calculations between a test case and a training case that are necessarily suboptimal. In other words, if you know the distance to one potential nearest neighbour is 100, and half-way through calculating the distance to another potential nearest neighbour you already have a distance-so-far of 105, stop calculating and move on to the next candidate for nearest neighbour.</li>
<li>Use goroutines to parallelize the computations. The way this was done was not ideal, because the parallelism isn't in the classification algorithm itself, instead it parellelizes the classification of the members of the validation sample. However, it's is easy enough to &quot;do it right&quot;, and what's currently there is good enough to see how significant the gains are when firing on all your cores.</li>
</ol>
<div class='bogus-wrapper'>
<notextile>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ time go run golang-k-nn-speedup.go
</span><span class='line'>
</span><span class='line'>0.944
</span><span class='line'>
</span><span class='line'>real  0m1.375s
</span><span class='line'>user  0m3.314s
</span><span class='line'>sys   0m0.117s</span></code></pre></td></tr></table></div></figure>
</notextile>
</div>

<h2 id="code">Code</h2>
<h4 id="golang-naive">Golang (naive)</h4>
<div class='bogus-wrapper'>
<notextile>
<figure class='code'><figcaption>
<span></span>
</figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;bytes&quot;</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;io/ioutil&quot;</span>
</span><span class='line'>  <span class="s">&quot;strconv&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">LabelWithFeatures</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Label</span>    <span class="p">[]</span><span class="kt">byte</span>
</span><span class='line'>  <span class="nx">Features</span> <span class="p">[]</span><span class="kt">float64</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">NewLabelWithFeatures</span><span class="p">(</span><span class="nx">parsedLine</span> <span class="p">[][]</span><span class="kt">byte</span><span class="p">)</span> <span class="nx">LabelWithFeatures</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">label</span> <span class="o">:=</span> <span class="nx">parsedLine</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  <span class="nx">features</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">float64</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">parsedLine</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">feature</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">parsedLine</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// skip label</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">continue</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">features</span><span class="p">[</span><span class="nx">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="p">=</span> <span class="nx">byteSliceTofloat64</span><span class="p">(</span><span class="nx">feature</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">LabelWithFeatures</span><span class="p">{</span><span class="nx">label</span><span class="p">,</span> <span class="nx">features</span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">newline</span> <span class="p">=</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&quot;\n&quot;</span><span class="p">)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">comma</span> <span class="p">=</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&quot;,&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">byteSliceTofloat64</span><span class="p">(</span><span class="nx">b</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="kt">float64</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">x</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nx">ParseFloat</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span> <span class="mi">32</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">x</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">parseCSVFile</span><span class="p">(</span><span class="nx">filePath</span> <span class="kt">string</span><span class="p">)</span> <span class="p">[]</span><span class="nx">LabelWithFeatures</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fileContent</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nx">ReadFile</span><span class="p">(</span><span class="nx">filePath</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">lines</span> <span class="o">:=</span> <span class="nx">bytes</span><span class="p">.</span><span class="nx">Split</span><span class="p">(</span><span class="nx">fileContent</span><span class="p">,</span> <span class="nx">newline</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">numRows</span> <span class="o">:=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">lines</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">labelsWithFeatures</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="nx">LabelWithFeatures</span><span class="p">,</span> <span class="nx">numRows</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">line</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">lines</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// skip headers</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">i</span> <span class="o">==</span> <span class="nx">numRows</span><span class="o">-</span><span class="mi">1</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">continue</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">labelsWithFeatures</span><span class="p">[</span><span class="nx">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="p">=</span> <span class="nx">NewLabelWithFeatures</span><span class="p">(</span><span class="nx">bytes</span><span class="p">.</span><span class="nx">Split</span><span class="p">(</span><span class="nx">line</span><span class="p">,</span> <span class="nx">comma</span><span class="p">))</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">labelsWithFeatures</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">squareDistance</span><span class="p">(</span><span class="nx">features1</span><span class="p">,</span> <span class="nx">features2</span> <span class="p">[]</span><span class="kt">float64</span><span class="p">)</span> <span class="p">(</span><span class="nx">d</span> <span class="kt">float64</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">features1</span><span class="p">);</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">d</span> <span class="o">+=</span> <span class="p">(</span><span class="nx">features1</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">-</span> <span class="nx">features2</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="o">*</span> <span class="p">(</span><span class="nx">features1</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">-</span> <span class="nx">features2</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">trainingSample</span> <span class="p">=</span> <span class="nx">parseCSVFile</span><span class="p">(</span><span class="s">&quot;trainingsample.csv&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">classify</span><span class="p">(</span><span class="nx">features</span> <span class="p">[]</span><span class="kt">float64</span><span class="p">)</span> <span class="p">(</span><span class="nx">label</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">label</span> <span class="p">=</span> <span class="nx">trainingSample</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">Label</span>
</span><span class='line'>  <span class="nx">d</span> <span class="o">:=</span> <span class="nx">squareDistance</span><span class="p">(</span><span class="nx">features</span><span class="p">,</span> <span class="nx">trainingSample</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">Features</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">row</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">trainingSample</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">dNew</span> <span class="o">:=</span> <span class="nx">squareDistance</span><span class="p">(</span><span class="nx">features</span><span class="p">,</span> <span class="nx">row</span><span class="p">.</span><span class="nx">Features</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">dNew</span> <span class="p">&lt;</span> <span class="nx">d</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">label</span> <span class="p">=</span> <span class="nx">row</span><span class="p">.</span><span class="nx">Label</span>
</span><span class='line'>          <span class="nx">d</span> <span class="p">=</span> <span class="nx">dNew</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">validationSample</span> <span class="o">:=</span> <span class="nx">parseCSVFile</span><span class="p">(</span><span class="s">&quot;validationsample.csv&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">totalCorrect</span> <span class="o">:=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">test</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">validationSample</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="nb">string</span><span class="p">(</span><span class="nx">test</span><span class="p">.</span><span class="nx">Label</span><span class="p">)</span> <span class="o">==</span> <span class="nb">string</span><span class="p">(</span><span class="nx">classify</span><span class="p">(</span><span class="nx">test</span><span class="p">.</span><span class="nx">Features</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">totalCorrect</span><span class="o">++</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nb">float64</span><span class="p">(</span><span class="nx">totalCorrect</span><span class="p">)</span> <span class="o">/</span> <span class="nb">float64</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">validationSample</span><span class="p">)))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</notextile>
</div>

<h4 id="golang-optimized">Golang (optimized)</h4>
<div class='bogus-wrapper'>
<notextile>
<figure class='code'><figcaption>
<span></span>
</figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;bytes&quot;</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;io/ioutil&quot;</span>
</span><span class='line'>  <span class="s">&quot;math&quot;</span>
</span><span class='line'>  <span class="s">&quot;runtime&quot;</span>
</span><span class='line'>  <span class="s">&quot;strconv&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">LabelWithFeatures</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Label</span>    <span class="p">[]</span><span class="kt">byte</span>
</span><span class='line'>  <span class="nx">Features</span> <span class="p">[]</span><span class="kt">float32</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">NewLabelWithFeatures</span><span class="p">(</span><span class="nx">parsedLine</span> <span class="p">[][]</span><span class="kt">byte</span><span class="p">)</span> <span class="nx">LabelWithFeatures</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">label</span> <span class="o">:=</span> <span class="nx">parsedLine</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  <span class="nx">features</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">float32</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">parsedLine</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">feature</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">parsedLine</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// skip label</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">continue</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">features</span><span class="p">[</span><span class="nx">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="p">=</span> <span class="nx">byteSliceTofloat32</span><span class="p">(</span><span class="nx">feature</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">LabelWithFeatures</span><span class="p">{</span><span class="nx">label</span><span class="p">,</span> <span class="nx">features</span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">newline</span> <span class="p">=</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&quot;\n&quot;</span><span class="p">)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">comma</span> <span class="p">=</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&quot;,&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">byteSliceTofloat32</span><span class="p">(</span><span class="nx">b</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="kt">float32</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">x</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nx">ParseFloat</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span> <span class="mi">32</span><span class="p">)</span> <span class="c1">//10, 8)</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">float32</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">parseCSVFile</span><span class="p">(</span><span class="nx">filePath</span> <span class="kt">string</span><span class="p">)</span> <span class="p">[]</span><span class="nx">LabelWithFeatures</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fileContent</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nx">ReadFile</span><span class="p">(</span><span class="nx">filePath</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">lines</span> <span class="o">:=</span> <span class="nx">bytes</span><span class="p">.</span><span class="nx">Split</span><span class="p">(</span><span class="nx">fileContent</span><span class="p">,</span> <span class="nx">newline</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">numRows</span> <span class="o">:=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">lines</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">labelsWithFeatures</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="nx">LabelWithFeatures</span><span class="p">,</span> <span class="nx">numRows</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">line</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">lines</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// skip headers</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">i</span> <span class="o">==</span> <span class="nx">numRows</span><span class="o">-</span><span class="mi">1</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">continue</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">labelsWithFeatures</span><span class="p">[</span><span class="nx">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="p">=</span> <span class="nx">NewLabelWithFeatures</span><span class="p">(</span><span class="nx">bytes</span><span class="p">.</span><span class="nx">Split</span><span class="p">(</span><span class="nx">line</span><span class="p">,</span> <span class="nx">comma</span><span class="p">))</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">labelsWithFeatures</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">squareDistanceWithBailout</span><span class="p">(</span><span class="nx">features1</span><span class="p">,</span> <span class="nx">features2</span> <span class="p">[]</span><span class="kt">float32</span><span class="p">,</span> <span class="nx">bailout</span> <span class="kt">float32</span><span class="p">)</span> <span class="p">(</span><span class="nx">d</span> <span class="kt">float32</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">features1</span><span class="p">);</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">x</span> <span class="o">:=</span> <span class="nx">features1</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">-</span> <span class="nx">features2</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
</span><span class='line'>      <span class="nx">d</span> <span class="o">+=</span> <span class="nx">x</span> <span class="o">*</span> <span class="nx">x</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="nx">d</span> <span class="p">&gt;</span> <span class="nx">bailout</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">break</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">trainingSample</span> <span class="p">=</span> <span class="nx">parseCSVFile</span><span class="p">(</span><span class="s">&quot;trainingsample.csv&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">classify</span><span class="p">(</span><span class="nx">features</span> <span class="p">[]</span><span class="kt">float32</span><span class="p">)</span> <span class="p">(</span><span class="nx">label</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">label</span> <span class="p">=</span> <span class="nx">trainingSample</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">Label</span>
</span><span class='line'>  <span class="nx">d</span> <span class="o">:=</span> <span class="nx">squareDistanceWithBailout</span><span class="p">(</span><span class="nx">features</span><span class="p">,</span> <span class="nx">trainingSample</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">Features</span><span class="p">,</span> <span class="nx">math</span><span class="p">.</span><span class="nx">MaxFloat32</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">row</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">trainingSample</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">dNew</span> <span class="o">:=</span> <span class="nx">squareDistanceWithBailout</span><span class="p">(</span><span class="nx">features</span><span class="p">,</span> <span class="nx">row</span><span class="p">.</span><span class="nx">Features</span><span class="p">,</span> <span class="nx">d</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="nx">dNew</span> <span class="p">&lt;</span> <span class="nx">d</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">label</span> <span class="p">=</span> <span class="nx">row</span><span class="p">.</span><span class="nx">Label</span>
</span><span class='line'>          <span class="nx">d</span> <span class="p">=</span> <span class="nx">dNew</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">runtime</span><span class="p">.</span><span class="nx">GOMAXPROCS</span><span class="p">(</span><span class="nx">runtime</span><span class="p">.</span><span class="nx">NumCPU</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">validationSample</span> <span class="o">:=</span> <span class="nx">parseCSVFile</span><span class="p">(</span><span class="s">&quot;validationsample.csv&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">totalCorrect</span> <span class="kt">float32</span> <span class="p">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="nx">successChannel</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">float32</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">test</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">validationSample</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">go</span> <span class="kd">func</span><span class="p">(</span><span class="nx">t</span> <span class="nx">LabelWithFeatures</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="nb">string</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">Label</span><span class="p">)</span> <span class="o">==</span> <span class="nb">string</span><span class="p">(</span><span class="nx">classify</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">Features</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">successChannel</span> <span class="o">&lt;-</span> <span class="mi">1</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">successChannel</span> <span class="o">&lt;-</span> <span class="mi">0</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}(</span><span class="nx">test</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">validationSample</span><span class="p">);</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">totalCorrect</span> <span class="o">+=</span> <span class="o">&lt;-</span><span class="nx">successChannel</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nb">float32</span><span class="p">(</span><span class="nx">totalCorrect</span><span class="p">)</span> <span class="o">/</span> <span class="nb">float32</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">validationSample</span><span class="p">)))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</notextile>
</div>

<h4 id="haskell-naive">Haskell (naive)</h4>
<div class='bogus-wrapper'>
<notextile>
<figure class='code'><figcaption>
<span></span>
</figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="cm">{-# LANGUAGE BangPatterns #-}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nn">Data.Csv</span>
</span><span class='line'><span class="kr">import</span> <span class="k">qualified</span> <span class="nn">Data.ByteString.Lazy</span> <span class="k">as</span> <span class="n">BS</span>
</span><span class='line'><span class="kr">import</span> <span class="k">qualified</span> <span class="nn">Data.Vector</span> <span class="k">as</span> <span class="n">V</span>
</span><span class='line'>
</span><span class='line'><span class="kr">type</span> <span class="kt">Label</span> <span class="ow">=</span> <span class="kt">Field</span>
</span><span class='line'>
</span><span class='line'><span class="kr">type</span> <span class="kt">Feature</span> <span class="ow">=</span> <span class="kt">Integer</span>
</span><span class='line'>
</span><span class='line'><span class="kr">data</span> <span class="kt">Observation</span> <span class="ow">=</span> <span class="kt">Observation</span> <span class="p">{</span> <span class="n">label</span> <span class="ow">::</span> <span class="o">!</span><span class="kt">Label</span>
</span><span class='line'>                               <span class="p">,</span> <span class="n">features</span> <span class="ow">::</span> <span class="o">!</span><span class="p">(</span><span class="kt">V</span><span class="o">.</span><span class="kt">Vector</span> <span class="kt">Feature</span><span class="p">)</span>
</span><span class='line'>                               <span class="p">}</span> <span class="kr">deriving</span> <span class="p">(</span><span class="kt">Show</span><span class="p">,</span> <span class="kt">Eq</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kr">instance</span> <span class="kt">FromRecord</span> <span class="kt">Observation</span> <span class="kr">where</span>
</span><span class='line'>  <span class="n">parseRecord</span> <span class="o">!</span><span class="n">v</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>    <span class="kt">V</span><span class="o">.</span><span class="n">mapM</span> <span class="n">parseField</span> <span class="p">(</span><span class="kt">V</span><span class="o">.</span><span class="n">tail</span> <span class="n">v</span><span class="p">)</span> <span class="o">&gt;&gt;=</span>
</span><span class='line'>      <span class="n">return</span> <span class="o">.</span> <span class="kt">Observation</span> <span class="p">(</span><span class="kt">V</span><span class="o">.</span><span class="n">head</span> <span class="n">v</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nf">parseRecords</span> <span class="ow">::</span> <span class="kt">BS</span><span class="o">.</span><span class="kt">ByteString</span> <span class="ow">-&gt;</span> <span class="kt">Either</span> <span class="kt">String</span> <span class="p">(</span><span class="kt">V</span><span class="o">.</span><span class="kt">Vector</span> <span class="kt">Observation</span><span class="p">)</span>
</span><span class='line'><span class="nf">parseRecords</span> <span class="ow">=</span> <span class="n">decode</span> <span class="kt">HasHeader</span>
</span><span class='line'>
</span><span class='line'><span class="nf">dist</span> <span class="ow">::</span> <span class="p">(</span><span class="kt">V</span><span class="o">.</span><span class="kt">Vector</span> <span class="kt">Feature</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="kt">V</span><span class="o">.</span><span class="kt">Vector</span> <span class="kt">Feature</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="kt">Integer</span>
</span><span class='line'><span class="nf">dist</span> <span class="o">!</span><span class="n">x</span> <span class="o">!</span><span class="n">y</span> <span class="ow">=</span> <span class="kt">V</span><span class="o">.</span><span class="n">sum</span> <span class="o">$</span> <span class="kt">V</span><span class="o">.</span><span class="n">map</span> <span class="p">(</span><span class="o">^</span><span class="mi">2</span><span class="p">)</span> <span class="o">$</span> <span class="kt">V</span><span class="o">.</span><span class="n">zipWith</span> <span class="p">(</span><span class="o">-</span><span class="p">)</span> <span class="n">x</span> <span class="n">y</span>
</span><span class='line'>
</span><span class='line'><span class="nf">closerTo</span> <span class="ow">::</span> <span class="p">(</span><span class="kt">V</span><span class="o">.</span><span class="kt">Vector</span> <span class="kt">Feature</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="kt">Observation</span> <span class="ow">-&gt;</span> <span class="kt">Observation</span> <span class="ow">-&gt;</span> <span class="kt">Ordering</span>
</span><span class='line'><span class="nf">closerTo</span> <span class="o">!</span><span class="n">target</span> <span class="o">!</span><span class="n">o1</span> <span class="o">!</span><span class="n">o2</span> <span class="ow">=</span> <span class="n">compare</span> <span class="p">(</span><span class="n">dist</span> <span class="n">target</span> <span class="p">(</span><span class="n">features</span> <span class="n">o1</span><span class="p">))</span> <span class="p">(</span><span class="n">dist</span> <span class="n">target</span> <span class="p">(</span><span class="n">features</span> <span class="n">o2</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="nf">classify</span> <span class="ow">::</span> <span class="p">(</span><span class="kt">V</span><span class="o">.</span><span class="kt">Vector</span> <span class="kt">Observation</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="kt">V</span><span class="o">.</span><span class="kt">Vector</span> <span class="kt">Feature</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="kt">Label</span>
</span><span class='line'><span class="nf">classify</span> <span class="o">!</span><span class="n">os</span> <span class="o">!</span><span class="n">fs</span> <span class="ow">=</span> <span class="n">label</span> <span class="kr">where</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">Observation</span> <span class="n">label</span> <span class="kr">_</span><span class="p">)</span> <span class="ow">=</span> <span class="kt">V</span><span class="o">.</span><span class="n">minimumBy</span> <span class="p">(</span><span class="n">closerTo</span> <span class="n">fs</span><span class="p">)</span> <span class="n">os</span>
</span><span class='line'>
</span><span class='line'><span class="nf">checkCorrect</span> <span class="ow">::</span> <span class="p">(</span><span class="kt">V</span><span class="o">.</span><span class="kt">Vector</span> <span class="kt">Observation</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="kt">Observation</span> <span class="ow">-&gt;</span> <span class="kt">Int</span>
</span><span class='line'><span class="nf">checkCorrect</span> <span class="o">!</span><span class="n">training</span> <span class="p">(</span><span class="kt">Observation</span> <span class="n">label</span> <span class="n">features</span><span class="p">)</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">label</span> <span class="o">==</span> <span class="n">classify</span> <span class="n">training</span> <span class="n">features</span> <span class="ow">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">otherwise</span> <span class="ow">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="nf">main</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>  <span class="n">validationSample</span> <span class="ow">&lt;-</span> <span class="kt">BS</span><span class="o">.</span><span class="n">readFile</span> <span class="s">&quot;validationsample.csv&quot;</span>
</span><span class='line'>  <span class="n">trainingSample</span> <span class="ow">&lt;-</span> <span class="kt">BS</span><span class="o">.</span><span class="n">readFile</span> <span class="s">&quot;trainingsample.csv&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">let</span> <span class="kt">Right</span> <span class="n">validation</span> <span class="ow">=</span> <span class="n">parseRecords</span> <span class="n">validationSample</span>
</span><span class='line'>  <span class="kr">let</span> <span class="kt">Right</span> <span class="n">training</span> <span class="ow">=</span> <span class="n">parseRecords</span> <span class="n">trainingSample</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">print</span> <span class="p">(</span><span class="kt">V</span><span class="o">.</span><span class="n">sum</span> <span class="p">(</span><span class="kt">V</span><span class="o">.</span><span class="n">map</span> <span class="p">(</span><span class="n">checkCorrect</span> <span class="n">training</span><span class="p">)</span> <span class="n">validation</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>
</notextile>
</div>


]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[So You Still Don't Understand Hindley-Milner?  Part 3]]></title>
    <link href="http://legacy-blog.akgupta.ca/blog/2013/06/07/so-you-still-dont-understand-hindley-milner-part-3/"/>
    <updated>2013-06-07T00:22:00-07:00</updated>
    <id>http://legacy-blog.akgupta.ca/blog/2013/06/07/so-you-still-dont-understand-hindley-milner-part-3</id>
    <content type="html"><![CDATA[<p>In <a href="http://legacy-blog.akgupta.ca/blog/2013/06/07/so-you-still-dont-understand-hindley-milner-part-2/">Part 2</a>, we finished defining all the formal terms and symbols you see in the <a href="http://stackoverflow.com/questions/12532552/what-part-of-milner-hindley-do-you-not-understand">StackOverflow question</a> on the Hindley-Milner algorithm, so now we're ready to translate what that question was asking about, namely the rules for deducing statements about type inference. Let's get down to it!</p>
<h2 id="the-rules-for-deducing-statements-about-type-inference">The rules for deducing statements about type inference</h2>
<p>[Var]</p>
<p><br /><span class="math">$\underline{x:\sigma \in \Gamma}$</span><br /> <br /><span class="math">Γ  ⊢ <em>x</em>: <em>σ</em></span><br /></p>
<p>This translates to: If &quot;<span class="math"><em>x</em></span> has type <span class="math"><em>σ</em></span>&quot; is a statement in our collection of statements <span class="math">Γ </span>, then from <span class="math">Γ </span> you can infer that <span class="math"><em>x</em></span> has type <span class="math"><em>σ</em></span>. Here <span class="math"><em>x</em></span> is a variable (hence the name of this rule of inference). Yes, it should sound that painfully obvious. The terse, cryptic way that [Var] is expressed isn't that way because it contains some deep, difficult fact. It's terse and succinct so that a machine can understand it and type inference can be automated.<br /><!--more--></p>
<p>[App]</p>
<p><br /><span class="math">$\underline{\Gamma\vdash e_0:\tau\rightarrow\tau '\ \ \ \Gamma\vdash e_1:\tau}$</span><br /> <br /><span class="math">Γ  ⊢ <em>e</em><sub>0</sub>(<em>e</em><sub>1</sub>): <em>τ</em>ʹ</span><br /></p>
<p>This translates to: If we can infer that <span class="math"><em>e</em><sub>0</sub></span> is an expression whose type is <span class="math"><em>τ</em> → <em>τ</em>ʹ</span> (e.g. <span class="math"><em>e</em><sub>0</sub></span> might be an anonymous function which, according to <span class="math">Γ </span>, takes input of type <span class="math"><em>τ</em></span> and returns output of type <span class="math"><em>τ</em>ʹ</span>), and we can infer that <span class="math"><em>e</em><sub>1</sub></span> has type <span class="math"><em>τ</em></span>, then we may deduce that we can infer that <span class="math"><em>e</em><sub>0</sub>(<em>e</em><sub>1</sub>)</span>, the expression obtained by applying <span class="math"><em>e</em><sub>0</sub></span> to <span class="math"><em>e</em><sub>1</sub></span>, has type <span class="math"><em>τ</em>ʹ</span>. The intuitive gist is if we can infer the types of the input and output of a function, and we can infer some expression has the same type as the input of the function, then when we apply the function to that expression, we can infer the result expression has the type of the output of the function. Nothing bewildering here.</p>
<p>[Abs]</p>
<p><br /><span class="math">$\underline{\ \ \Gamma, x:\tau \vdash e:\tau '\ \ }$</span><br /> <br /><span class="math">Γ  ⊢ <em>λ</em><em>x</em>. <em>e</em>: <em>τ</em> → <em>τ</em>ʹ</span><br /></p>
<p>This translates to: If allowing us to assume that <span class="math"><em>x</em></span> has type <span class="math"><em>τ</em></span> we were able to infer that <span class="math"><em>e</em></span> has type <span class="math"><em>τ</em>ʹ</span>, then we may deduce that we can infer that the abstraction/anonymization of <span class="math"><em>e</em></span> with respect to the variable <span class="math"><em>x</em></span>, <span class="math"><em>λ</em><em>x</em>. <em>e</em></span>, has type <span class="math"><em>τ</em> → <em>τ</em>ʹ</span>. So, for example, we know that if <span class="math"><em>x</em></span> has type <span class="math">String</span>, then the expression <span class="math"><em>x</em>[0]</span> has type <span class="math">Char</span>. Now [Abs] allows us to deduce that</p>
<div class='bogus-wrapper'>
<notextile>
<figure class='code'><figcaption>
<span></span>
</figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">x</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</notextile>
</div>

<p>has type <span class="math">String → Char</span>.</p>
<p>Aside. I mentioned polytypes earlier. Let's revisit them it in this example, just to help hammer it home. So note that this function above also has type <span class="math">Array[Int] → Int</span>. In fact, for any type <span class="math"><em>t</em></span>, the function has type <span class="math">Array[<em>t</em>] → <em>t</em></span>. So it has many different types, <span class="math">String → Char</span> being just one of them. <em>Each</em> of its types of the form <span class="math">Array[<em>t</em>] → <em>t</em></span> is monotype. We can express that this function has <em>all</em> of these monotypes by saying that it has the polytype <span class="math">∀ <em>t</em>(Array[<em>t</em>] → <em>t</em>)</span>. We read that as &quot;for all <span class="math"><em>t</em></span>, the type <span class="math">Array[<em>t</em>] → <em>t</em></span>&quot; and we treat that whole thing as a single, yet more abstract, type. So note that when we infer the type of some expression, that doesn't mean that said type is the <em>only</em> type of that expression. An expression can have many types, and some of these types can be specializations of more abstract types. The simplest kinds of types are monotypes: <span class="math">Int</span>, <span class="math">String</span>, <span class="math">String → Char</span>, etc. but we can have more abstract/general types called polytypes.</p>
<p>[Let]</p>
<p><br /><span class="math">$\underline{\Gamma \vdash e_0:\sigma\ \ \ \ \Gamma , x:\sigma \vdash e_1 : \tau}$</span><br /> <br /><span class="math">Γ  ⊢ let <em>x</em> = <em>e</em><sub>0</sub>in <em>e</em><sub>1</sub>: <em>τ</em></span><br /></p>
<p>Easy:</p>
<p>If we can infer that <span class="math"><em>e</em><sub>0</sub></span> has type <span class="math"><em>σ</em></span>, and<br />If we were to assume <span class="math"><em>x</em></span> had type <span class="math"><em>σ</em></span> we could infer that <span class="math"><em>e</em><sub>1</sub></span> has type <span class="math"><em>t</em></span>,<br />Then we may deduce that we can infer that the result of letting <span class="math"><em>x</em> = <em>e</em><sub>0</sub></span>, and substituting it into <span class="math"><em>e</em><sub>1</sub></span>, has type <span class="math"><em>t</em></span>.</p>
<p>These last four rules do nothing more than formally capture our intuition about what type inferences we can make when we have variables and we do things like create anonymous functions, apply functions, and substitute expressions into other expressions. It's something we as programmers can do intuitively, and here we're just saying that this is something we can formally describe, what's happening in our brains isn't necessarily magical. It's also worth noting that these last four rules correspond precisely with the four rules for defining what a valid expression is in the Lambda Calculus. This is not a coincidence.</p>
<p>[Inst]</p>
<p><br /><span class="math">$\underline{\Gamma \vdash e:\sigma '\ \ \ \ \sigma '\sqsubseteq \sigma}$</span><br /> <br /><span class="math">Γ  ⊢ <em>e</em>: <em>σ</em></span><br /></p>
<p>This is about instantiation. You can think of the monotype <span class="math">Array[Int] → Int</span> as an instantiation of the polytype <span class="math">∀ <em>t</em>. Array[<em>t</em>] → <em>t</em></span>. Another word for this is &quot;specialization&quot;: <span class="math">Array[Int] → Int</span> is more specialized/specific than for <span class="math">∀ <em>t</em>. Array[<em>t</em>] → <em>t</em></span>. Flipping it around, we denote the &quot;less specialized/specific than&quot; relation between types with <span class="math"> ⊑ </span>. So</p>
<p><br /><span class="math">∀ <em>t</em>. Array[<em>t</em>] → <em>t</em>   ⊑   Array[<em>t</em>] → <em>t</em></span><br /></p>
<p>So the direct translation of [Inst] is: If we can infer <span class="math"><em>e</em></span> has type <span class="math"><em>σ</em>ʹ</span>, and <span class="math"><em>σ</em></span> is a specialization/instantiation of <span class="math"><em>σ</em>ʹ</span>, then we can deduce that we can infer that <span class="math"><em>e</em></span> has type <span class="math"><em>σ</em></span>. And you can think of <span class="math"><em>σ</em></span> and <span class="math"><em>σ</em>ʹ</span> as being types like <span class="math">Array[<em>t</em>] → <em>t</em></span> and <span class="math">∀ <em>t</em>. Array[<em>t</em>] → <em>t</em></span> respectively.</p>
<p>[Gen]</p>
<p><br /><span class="math">$\underline{\Gamma \vdash e:\sigma\ \ \ \ \alpha \notin \mathrm{free}(\Gamma)}$</span><br /> <br /><span class="math">Γ  ⊢ <em>e</em>: ∀ <em>α</em>. <em>σ</em></span><br /></p>
<p>This is the hardest one to understand. It really only makes sense in the context of doing a type inference using these restricted set of rules we're outlining. It doesn't have a very concrete analogue since it heavily depends on the concept of a variable type, something that never occurs in any real programming language, but is an indispensable concept when we're trying to work in a meta-language that talks about types in any arbitrary real programming language. The idea can sort of be captured in this &quot;example&quot;:</p>
<p>Suppose you have some variables <span class="math"><em>x</em></span> and <span class="math"><em>y</em></span>, and for the time being you're assuming they have type <span class="math"><em>α</em></span>, where <span class="math"><em>α</em></span> is a variable standing for a type. You later come across an expression that you somehow manage to infer has type <span class="math"><em>α</em> → <em>α</em></span> in <em>this</em> context (the context where you're assuming <span class="math"><em>x</em></span> and <span class="math"><em>y</em></span> have type <span class="math"><em>α</em></span>). The question is, will this function have the polytype <span class="math">∀ <em>α</em>. <em>α</em> → <em>α</em></span>? I.e. does this function generally map objects to things of the same type, or does that only appear to be the case because you assumed <span class="math"><em>x</em></span> and <span class="math"><em>y</em></span> had the same type <span class="math"><em>α</em></span>?</p>
<p>Since <span class="math"><em>α</em></span> is a variable type, i.e. it could stand for any type, we might like to think that, since we've inferred that <span class="math"><em>e</em></span> has type <span class="math"><em>α</em> → <em>α</em></span> that it has the polytype <span class="math">∀ <em>α</em>. <em>α</em> → <em>α</em></span>. But we can't necessarily make this generalization without more insight into how <span class="math"><em>e</em></span> is related to <span class="math"><em>x</em></span> and <span class="math"><em>y</em></span>; In particular, if our inference that it has type <span class="math"><em>α</em> → <em>α</em></span> is tightly coupled to our prior assumptions involving <span class="math"><em>α</em></span>, then we shouldn't conclude that it generally has the polytype <span class="math">∀ <em>α</em>. <em>α</em> → <em>α</em></span>.</p>
<p>Here's the translation:</p>
<p>If some variable type <span class="math"><em>α</em></span> hasn't &quot;freely&quot; been mentioned in our current context/set of knowledge/assumptions, and we can infer that some expression <span class="math"><em>e</em></span> has some type <span class="math"><em>σ</em></span>, then we can infer that <span class="math"><em>e</em></span> has type <span class="math"><em>σ</em></span> independent of what <span class="math"><em>α</em></span> turns out to be. Slightly more technically, <span class="math"><em>e</em></span> has the polytype <span class="math">∀ <em>α</em>. <em>σ</em></span>.</p>
<p>Okay, but what does &quot;freely mentioned&quot; mean? In a polytype like <span class="math">∀ <em>α</em>. <em>α</em> → <em>α</em></span>, <span class="math"><em>α</em></span> isn't &quot;really&quot; being mentioned. That type is the exact same as this one: <span class="math">∀ <em>β</em>. <em>β</em> → <em>β</em></span>. An expression with either type is just that of a function that sends any type to itself. On the other hand, <span class="math"><em>x</em>: <em>α</em></span> &quot;really&quot; does mention <span class="math"><em>α</em></span>.</p>
<p><br /><span class="math"><em>x</em>: <em>α</em></span><br /> <br /><span class="math"><em>y</em>: <em>β</em></span><br /></p>
<p>and</p>
<p><br /><span class="math"><em>x</em>: <em>α</em></span><br /> <br /><span class="math"><em>y</em>: <em>α</em></span><br /></p>
<p>mean different things. The latter means <span class="math"><em>x</em></span> and <span class="math"><em>y</em></span> definitely have the same type (even though what that type is may not have been pinned down). The former tells you nothing about how the types of <span class="math"><em>x</em></span> and <span class="math"><em>y</em></span> are related. The difference is, when <span class="math"><em>α</em></span> is mentioned inside the scope of a <span class="math">∀ </span>, as is the case in <span class="math">∀ <em>α</em>. <em>α</em> → <em>α</em></span>, that <span class="math"><em>α</em></span> is just a dummy, and can be swapped out for any other type variable regardless of the rest of the context. So we can interpret the statement &quot;<span class="math"><em>α</em></span> isn't freely mentioned in the context <span class="math">Γ </span>&quot; to say, &quot;<span class="math"><em>α</em></span> is either never mentioned at all, or, if it is, it's only ever mentioned as a dummy and could in principle be swapped out for something entirely different without changing the semantics of the assumptions/knowledge in our context.&quot;</p>
<p>And that's it. Questions? Comments? Let me know.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[So You Still Don't Understand Hindley-Milner?  Part 2]]></title>
    <link href="http://legacy-blog.akgupta.ca/blog/2013/06/07/so-you-still-dont-understand-hindley-milner-part-2/"/>
    <updated>2013-06-07T00:19:00-07:00</updated>
    <id>http://legacy-blog.akgupta.ca/blog/2013/06/07/so-you-still-dont-understand-hindley-milner-part-2</id>
    <content type="html"><![CDATA[<p>In <a href="http://legacy-blog.akgupta.ca/blog/2013/05/14/so-you-still-dont-understand-hindley-milner/">Part 1</a>, we said what the building blocks of the Hindley-Milner formalization would be, and in this post we'll thoroughly define them, and actually formulate the formalization:</p>
<h2 id="formalizing-the-concept-of-an-expression">Formalizing the concept of an expression</h2>
<p>We'll give a <a href="http://en.wikipedia.org/wiki/Recursive_definition">recursive definition</a> of what an expression is; in other words, we'll state what the most basic kind of expression is, we'll say how to create new, more complex expressions out of existing expressions, and we'll say that only things made in this way are valid expressions.<br /><!--more--></p>
<ol type="1">
<li>Variables are valid expressions.<br /></li>
<li>If <span class="math"><em>e</em></span> is any expression, and <span class="math"><em>x</em></span> is any variable, then <span class="math"><em>λ</em><em>x</em>. <em>e</em></span> is an expression. Here it helps to think of e as typically (thought not necessarily) a more complex expression involving <span class="math"><em>x</em></span>, e.g. <span class="math"><em>x</em><sup>2</sup> + 2</span>, and then <span class="math"><em>λ</em><em>x</em>. <em>e</em></span> as the anonymous function that takes an input <span class="math"><em>x</em></span> and returns the result of evaluating the expression <span class="math"><em>e</em></span> with the given value of <span class="math"><em>x</em></span>. In other words, think of it like this:<br />
<div class='bogus-wrapper'>
<notextile>
<figure class='code'><figcaption>
<span></span>
</figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">x</span><span class="o">^</span><span class="mi">2</span> <span class="o">+</span> <span class="mi">2</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</notextile>
</div></li>
<li>If <span class="math"><em>f</em></span> and <span class="math"><em>e</em></span> are valid expressions, then <span class="math"><em>f</em>(<em>e</em>)</span> is a valid expression. This is called Application, for obvious reasons.</li>
<li>If <span class="math"><em>x</em></span> is a variable, and <span class="math"><em>e</em><sub>1</sub></span> and <span class="math"><em>e</em><sub>0</sub></span> are valid expressions, then substituting every occurrence of <span class="math"><em>x</em></span> in <span class="math"><em>e</em><sub>0</sub></span> for <span class="math"><em>e</em><sub>1</sub></span> yields a valid expression. So, for example, if <span class="math"><em>e</em><sub>1</sub></span> is the expression <span class="math"><em>x</em><sup>2</sup> + 2</span>, and <span class="math"><em>e</em><sub>0</sub></span> is the expression <span class="math"><em>y</em> / 3</span>, then if we let <span class="math"><em>x</em> = <em>e</em><sub>0</sub></span> in <span class="math"><em>e</em><sub>1</sub></span>, we get the expression <span class="math">(<em>y</em> / 3)<sup>2</sup> + 2</span>.<br />[NB: This last clause is redundant and not officially a part of the Lambda Calculus definition of an expression, as substituting <span class="math"><em>e</em><sub>0</sub></span> for <span class="math"><em>x</em></span> in <span class="math"><em>e</em><sub>1</sub></span> is equivalent to applying the abstraction <span class="math"><em>λ</em><em>x</em>. <em>e</em><sub>1</sub></span> to <span class="math"><em>e</em><sub>0</sub></span>. It's added to support something called <a href="https://en.wikipedia.org/wiki/Hindley%E2%80%93Milner#Let-polymorphism">let-polymorphism</a>.]</li>
</ol>
<p>And nothing else is a valid expression.</p>
<p>Aside: anyone paying close attention will wonder, wait, how can I make any useful expressions out of this? How do I even get <span class="math"><em>x</em><sup>2</sup> + 2</span>, or in fact <span class="math">2</span> for that matter, out of the above? Heck, what about <span class="math">0</span>? There is nothing in the rules above which <em>obviously</em> yield the expression <span class="math">0</span>. The solution is to create expressions in the Lambda Calculus which behave like <span class="math">0, 1, …,  + ,  × ,  − ,  / </span> when interpreted correctly. In other words, we have to encode numbers, numerical operations, strings, etc. into patterns we can create with the Lambda syntax. <a href="http://palmstroem.blogspot.com/2012/05/lambda-calculus-for-absolute-dummies.html">This blog post</a> has a nice little section on numbers and numerical operations. This is a great feature of the Lambda Calculus: we have a simple syntax which we can define recursively in 4 simple clauses, and this therefore allows us to prove many things about it inductively in 4 main steps, yet the language itself has the expressive power to capture numbers, strings, and all the types and operations we could ever care about.</p>
<h2 id="formalizing-statements-about-types">Formalizing statements about types</h2>
<p>Let <span class="math"><em>e</em></span> be any expression, that is, &quot;<span class="math"><em>e</em></span>&quot; is a variable in our meta-language which stands for any expression in our base language, like any of the following:</p>
<div class='bogus-wrapper'>
<notextile>
<figure class='code'><figcaption>
<span></span>
</figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">x</span>
</span><span class='line'><span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">].</span><span class="nx">forEach</span> <span class="p">(</span> <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span> <span class="nx">print</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="p">}</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>
</notextile>
</div>

<p>Then if <span class="math"><em>t</em></span> is any type, we can express &quot;<span class="math"><em>e</em></span> is of type <span class="math"><em>t</em></span>&quot; by</p>
<p><br /><span class="math"><em>e</em>: <em>t</em></span><br /></p>
<p>Just like <span class="math"><em>e</em></span>, <span class="math"><em>t</em></span> is a variable in our meta-language, and it can stand for any type in the base language, like <span class="math">Int</span>, <span class="math">String</span>, etc. And just like <span class="math"><em>e</em></span>, <span class="math"><em>t</em></span> doesn't necessarily need to stand for any one type in particular.</p>
<p>One can give a formal definition for what counts as a type, just as we did for expressions above. However the abstraction gets fairly twisted, so we'll leave it at that. I should just point out a few two key things to keep in mind:</p>
<ol type="1">
<li>If <span class="math"><em>s</em></span> and <span class="math"><em>t</em></span> are types, then so is <span class="math"><em>t</em> → <em>s</em></span>; it's the type of a function with <span class="math"><em>t</em></span> inputs and <span class="math"><em>s</em></span> outputs.<br /></li>
<li>If <span class="math"><em>r</em></span> is a type, possibly made up of other types (just as <span class="math"><em>t</em> → <em>s</em></span> is made up of <span class="math"><em>t</em></span> and <span class="math"><em>s</em></span>, which could each potentially have been made up of other types), and <span class="math"><em>α</em></span> is a variable for a type, then <span class="math">∀ <em>α</em>. <em>r</em></span> is a type. That makes no sense without an example:</li>
</ol>
<div class='bogus-wrapper'>
<notextile>
<figure class='code'><figcaption>
<span></span>
</figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">x</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</notextile>
</div>

<p>This function is type <span class="math">String → String</span>. But it's also <span class="math">Int → Int</span>. In fact, for any type <span class="math"><em>t</em></span>, it's type <span class="math"><em>t</em> → <em>t</em></span>. We're gonna say that it has type <span class="math">∀ <em>t</em>. <em>t</em> → <em>t</em></span>. Each of the types <span class="math">String → String</span>, <span class="math"><em>t</em> → <em>t</em></span>, are &quot;monotypes&quot;. <span class="math">∀ <em>t</em>. <em>t</em> → <em>t</em></span> is a &quot;polytype&quot;. The identity function above has the abstract polytype <span class="math">∀ <em>t</em>. <em>t</em> → <em>t</em></span> which, in practice, means that for every real type <span class="math"><em>t</em></span>, it has type <span class="math"><em>t</em> → <em>t</em></span>. If all of this has been sinking in, then we can compactly express this as:</p>
<p><br /><span class="math"><em>λ</em><em>x</em>. <em>x</em>: ∀ <em>α</em>. <em>α</em> → <em>α</em></span><br /></p>
<h2 id="formalizing-statements-about-statements-about-types">Formalizing statements about statements about types</h2>
<p>Now we're going to want to formalize a bunch of rules for how we can go from some knowledge of expressions and their types to inferring types of more expressions. Remember how propositional calculus formalized Modus Ponens? We're going to do something similar. For instance, say we want to formalize the following piece of reasoning:</p>
<blockquote>
<p>Suppose I've already been able to infer that a variable <code>duck</code> has type <code>Animal</code>.<br />Suppose furthermore that I've inferred that <code>speak</code> is a method of type <code>Animal -&gt; String</code>.<br />Then I can infer that <code>speak(duck)</code> has type String.</p>
<p>And any reasoning of this form is valid type inference.</p>
</blockquote>
<p>We'll formalize that as follows:</p>
<p><br /><span class="math">$\underline{\Gamma\vdash e_0:\tau\rightarrow\tau '\ \ \ \Gamma\vdash e_1:\tau}$</span><br /> <br /><span class="math">Γ  ⊢ <em>e</em><sub>0</sub>(<em>e</em><sub>1</sub>): <em>τ</em>ʹ</span><br /></p>
<p>That rule has the name [App] (for application), and it's one of the ones pictured in <a href="http://stackoverflow.com/questions/12532552/what-part-of-milner-hindley-do-you-not-understand">that StackOverflow question</a>. We'll talk about it and the rest of the rules in the next post. For now, let's first get a handle on all the symbols you see above:</p>
<ul>
<li><span class="math">Γ </span>, this will stand for the collection of statements we already know, or perhaps, the statements we're assuming. More generally, <span class="math">Γ </span> should just be thought of as some collection of statements (about expressions and their types). And of course, there's nothing special about the letter <span class="math">Γ </span>; capital greek letters are commonly used for sets of statements however.<br /></li>
<li><span class="math"> ⊢ </span>, the &quot;turnstile&quot;, denotes that something can be inferred. For instance, <span class="math">Γ  ⊢ <em>x</em>: <em>t</em></span> says that if we take the statements in <span class="math">Γ </span> as our assumptions/axioms/current knowledge, then we can infer that <span class="math"><em>x</em></span> has type <span class="math"><em>t</em></span>.<br /></li>
<li><span class="math"> ∈ </span>, &quot;epsilon&quot;, denotes membership. <span class="math"><em>x</em>: <em>t</em> ∈ Γ </span> says that the statement <span class="math"><em>x</em>: <em>t</em></span> is a member of <span class="math">Γ </span>.</li>
<li>That long horizontal bar; this line tells us that we can make the conclusion below the line if the things above the line are taken as premises in the argument. It lets us express things like, &quot;if we can infer such and such, then we can infer such and such&quot;, e.g.</li>
</ul>
<p><br /><span class="math">$\underline{\Gamma \vdash y:\sigma}$</span><br /> <br /><span class="math">Γ  ⊢ <em>x</em>: <em>τ</em></span><br /></p>
<p>If we can infer that <span class="math"><em>y</em></span> has type <span class="math"><em>σ</em></span> from <span class="math">Γ </span>, then we can infer <span class="math"><em>x</em></span> has type <span class="math"><em>τ</em></span> from <span class="math">Γ </span>.</p>
<p>Next up:</p>
<ul>
<li><a href="http://legacy-blog.akgupta.ca/blog/2013/06/07/so-you-still-dont-understand-hindley-milner-part-3/">Part 3</a>, where we put this all together and make sense of the inference rules used by the HM algorithm.</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Entropy: How Password Strength is Measured]]></title>
    <link href="http://legacy-blog.akgupta.ca/blog/2013/06/06/entropy-how-password-strength-is-measured/"/>
    <updated>2013-06-06T23:35:00-07:00</updated>
    <id>http://legacy-blog.akgupta.ca/blog/2013/06/06/entropy-how-password-strength-is-measured</id>
    <content type="html"><![CDATA[<p>My colleague <a href="http://pivotallabs.com/author/msierchio/">Mike Sierchio</a> wrote a <a href="http://pivotallabs.com/entropy-is-not-entropy/">cool post</a> on password strength, and the concept of entropy. As he points out, entropy isn't always entropy. That confusion is apparently not uncommon, as it's been asked about <a href="http://security.stackexchange.com/questions/21143/confused-about-password-entropy">on IT Security Stack Exchange</a> as well. So what's really going on?</p>
<p>Let's step back for a sec and fill in some context. What are we trying to do? We'd like some way to measure how hard it is to guess our passwords, a number that serves as a heuristic standard of password strength. But there are two fundamentally different things we might want to measure:</p>
<ol type="1">
<li><p>How hard would it be for someone to guess your password with essentially no knowledge of how you created your password?</p></li>
<li><p>How hard would it be for someone to guess your password if they knew the process used to generate it? This is of course assuming that there <strong>is</strong> a process, for example some script that does some <code>Math.rand</code>-ing and produces a password string.</p></li>
</ol>
<p>The term &quot;entropy&quot; has been used to refer to both kinds of calculations, but they're clearly entirely different things: the former essentially takes a string as input, the latter takes a random process as input. Hence, &quot;entropy is not entropy.&quot;</p>
<p>Alright, well if entropy isn't entropy, let's see what entropies are. We'll look at the standard mathematical formulation of the random-process-entropy which comes from information theory. And we'll look at the function used to calculate particular-string-entropy in one of the most popular <a href="http://rumkin.com/tools/password/passchk.php">password strength testers</a>. And that's all we're going to do, we'll look at how the calculations are done, without dwelling too much on the differences between the two approaches or what their use cases are. <!--more--></p>
<h2 id="what-is-a-random-process">What is a random process?</h2>
<p>For our purposes, a random process will be determined by the set of all the possible outputs it can produce, and the probability associated with each output. If you roll a fair die, the possible outputs are 1, 2, 3, 4, 5, and 6, and each output happens to have the same probability associated with them, 1/6. If you have a process that rolls a die and then yells &quot;fizz&quot; if the output is divisible by 3, &quot;buzz&quot; if its divisible by 5, and just repeats the number otherwise, then the possible outputs are:</p>
<p>1, 2, &quot;fizz&quot;, 4, and &quot;buzz&quot;</p>
<p>with corresponding probabilities:</p>
<p>1/6, 1/6, 1/3, 1/6, and 1/6</p>
<p>We would like to favor processes that can potentially produce a lot of different outputs, and that give all the different outputs a fairly similar chance of occurring. If we had a process that picked a number between 1 and 999999999, but 95% of the time it picked 1, it wouldn't be that great since if an attacker knew this about our process, he or she could just make one guess, namely 1, and have a 95% chance of accessing whatever was supposed to be secured by a password generated by this process.</p>
<p>So here's the formula: given a process with possible outcomes <span class="math"><em>o</em><sub>1</sub>, …, <em>o</em><sub><em>n</em></sub></span>, and respective probabilities <span class="math"><em>p</em><sub>1</sub>, …, <em>p</em><sub><em>n</em></sub></span>, the entropy of this process is given by</p>
<p><br /><span class="math"> − [<em>p</em><sub>1</sub>log<sub>2</sub>(<em>p</em><sub>1</sub>) + … + <em>p</em><sub><em>n</em></sub>log<sub>2</sub>(<em>p</em><sub><em>n</em></sub>)]</span><br /></p>
<p>This formula satisfies the two criteria we wanted to satisfy above, and additionally has the following aesthetically pleasing feature: the random process which generates <span class="math"><em>n</em></span> independent random bits has entropy of <span class="math"><em>n</em></span>. Let's prove it:</p>
<p>That process has <span class="math">2<sup><em>n</em></sup></span> possible outcomes, each with equal probability, namely <span class="math">1 / 2<sup><em>n</em></sup></span> (it's like rolling a <span class="math">2<sup><em>n</em></sup></span>-sided fair die).</p>
<p><br /><span class="math">$- \left [ \frac{1}{2^n}\log _2\left(\frac{1}{2^n}\right) +\dots + \frac{1}{2^n}\log _2\left(\frac{1}{2^n}\right)\right]\ \ \ (2^n\mbox{ times})$</span><br /> <br /><span class="math">$= - \left[ 2^n \times \frac{1}{2^n}\log _2\left(\frac{1}{2^n}\right) \right]$</span><br /> <br /><span class="math">$= - \log_2\left(\frac{1}{2^n}\right)$</span><br /> <br /><span class="math"> =  − ( − <em>n</em>)</span><br /> <br /><span class="math"> = <em>n</em></span><br /></p>
<p>What about the entropy of our fizz-buzz process?</p>
<p><br /><span class="math">$- \left[4 \times \frac{1}{6}\log_2\left(\frac{1}{6}\right) + \frac{1}{3}\log_2\left(\frac{1}{3}\right)\right] \approx 2.252$</span><br /></p>
<h2 id="and-if-you-dont-know-the-process">… And if you don't know the process?</h2>
<p>Here's the heart of the code used on the <a href="http://rumkin.com/tools/password/passchk.php">strength test website</a> to estimate password strength:</p>
<div class='bogus-wrapper'>
<notextile>
<figure class='code'><figcaption>
<span></span>
</figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">c</span><span class="p">,</span> <span class="nx">aidx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">bits</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">charSet</span><span class="p">;</span>
</span><span class='line'><span class="nx">charSet</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Get_Charset_Size</span><span class="p">(</span><span class="nx">pass</span><span class="p">))</span> <span class="o">/</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="nx">aidx</span> <span class="o">=</span> <span class="nx">Get_Index</span><span class="p">(</span><span class="nx">plower</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">b</span> <span class="o">&lt;</span> <span class="nx">plower</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">b</span> <span class="o">++</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">bidx</span> <span class="o">=</span> <span class="nx">Get_Index</span><span class="p">(</span><span class="nx">plower</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">b</span><span class="p">));</span>
</span><span class='line'>  <span class="nx">c</span> <span class="o">=</span> <span class="mf">1.0</span> <span class="o">-</span> <span class="nx">Frequency_Table</span><span class="p">[</span><span class="nx">aidx</span> <span class="o">*</span> <span class="mi">27</span> <span class="o">+</span> <span class="nx">bidx</span><span class="p">];</span>
</span><span class='line'>  <span class="nx">bits</span> <span class="o">+=</span> <span class="nx">charSet</span> <span class="o">*</span> <span class="nx">c</span> <span class="o">*</span> <span class="nx">c</span><span class="p">;</span>  <span class="c1">// Squared = assume they are good guessers</span>
</span><span class='line'>  <span class="nx">aidx</span> <span class="o">=</span> <span class="nx">bidx</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</notextile>
</div>

<p>And here it is, refactored, Ruby-fied, and decorated with couple additional comments:</p>
<div class='bogus-wrapper'>
<notextile>
<figure class='code'><figcaption>
<span></span>
</figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">entropy</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="n">password</span><span class="o">.</span><span class="n">chars</span><span class="o">.</span><span class="n">each_cons</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">char</span><span class="p">,</span> <span class="n">next_char</span><span class="o">|</span>
</span><span class='line'>  <span class="n">entropy</span> <span class="o">+=</span> <span class="n">unlikelihood_of_consecutive_chars</span><span class="p">(</span><span class="n">char</span><span class="p">,</span> <span class="n">next_char</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">entropy</span> <span class="o">*=</span> <span class="no">Math</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="n">estimate_char_pool_size</span><span class="p">(</span><span class="n">password</span><span class="p">),</span> <span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>
</notextile>
</div>

<p>There's a couple questions this should evoke. How is it determining how unlikely it is for two characters to show up consecutively? If you look at the original code you can see it's looking things up in a table. It gets the index of the two characters (what it calls <code>aidx</code> and <code>bidx</code>), and then finds the entry in the table corresponding to that pair by finding the <code>aidx * 27 + bidx</code>-th entry in an array representing the frequency table. This suggests that this table is 27 x 27. It treats upper case letters the same as lower case, and it treats all numbers and special characters the exact same! Indeed, it'll tell you that the following two passwords have the same entropy:</p>
<pre><code>^341^)8@#05&amp;*6%%#$7(9!24%</code></pre>
<p>and</p>
<pre><code>!111111111111111111111111</code></pre>
<p>Also, notice how it only considers two consecutive characters at a time, never &quot;learning&quot; from patterns it might have observed earlier in the string. So for instance given a password like <code>aaaaaaaaaaaaa</code>, it doesn't &quot;catch on&quot; by the 6th or 7th <code>aa</code> pair that there seems to be a lot of <code>aa</code> pairs. It's just as &quot;surprised&quot; to see the last <code>aa</code> pair as it was to see the first.</p>
<p>And what about this character pool size estimation? Some experimenting will show you that if it detects a single numerical digit, it assumes all of the numerical digits were available in the selection pool for every single letter. If it sees a single character from <code>!@#$%^&amp;*()</code>, it'll assume they were all available, and again, for every letter. So in particular if your process is mainly a bunch of English letters and then you just throw in a single number and one of <code>!@#$%^&amp;*()</code> at the end, you'll get a bump to your password strength.</p>
<p>Going back to the consecutive pair thing, why just consecutive pairs? What about triples?</p>
<p>Oh, and what about that business of squaring the &quot;unlikeliness&quot; of the consecutive characters? The unlikeliness is a probability, hence a number between 0 and 1, and so squaring it results in a smaller number. Since we're adding these numbers to our calculation of entropy, it results in a smaller value for our final entropy. Therefore it tries to capture the assumption that the attacker is a good guesser. But why <em>squaring</em> specifically?</p>
<p>To be clear, these are simply questions worth asking, not criticisms per se. This way of calculating entropy is supposed to be naive, and is supposed to make as few assumptions as possible about how the given password is generated, and thus what patterns to expect. If it made stronger assumptions, then it would be very bad at estimating the password strength of even a very weak process that simply made sure to contradict those assumptions.</p>
<p>Well, I guess some of them are criticisms. And there are criticisms to be leveled against the ubiquity of the usual &quot;your password must contain 8-20 characters, at least one number and one special character,&quot; etc. But that's all for this post.</p>
<p>Oh, and not only is entropy not entropy, entropy is also this thing:</p>
<p><br /><span class="math">$\Delta S = \int \frac{dQ_{rev}}{T}$</span><br /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yo Dawg, I Herd You Like Math]]></title>
    <link href="http://legacy-blog.akgupta.ca/blog/2013/06/02/yo-dawg/"/>
    <updated>2013-06-02T12:23:00-07:00</updated>
    <id>http://legacy-blog.akgupta.ca/blog/2013/06/02/yo-dawg</id>
    <content type="html"><![CDATA[<p>I've been learning a bit of statistical computing with R lately on the side from <a href="http://www.stat.berkeley.edu/~paciorek/teaching/teaching.html">Chris Paciorek's Berkeley course</a>. I just got introduced to <a href="http://yihui.name/knitr/">knitr</a> and it's damned sweet! It's an R package which takes a LaTeX file with embedded R, and produces a pure LaTeX file (similar to how Rails renders an <code>.html.erb</code> file into a <code>.html</code> file), where the resulting LaTeX file has the output of the R code. It makes it super easy to embed statistical calculations, graphs, and all the good stuff R gives you right into your TeX files. It let's you put math in your math, so you can math while you math.</p>
<p>I've got a <a href="https://github.com/amitkgupta/knit_tds">little project</a> which:</p>
<ol type="1">
<li>Runs a Python script which will use Selenium to scrape a web page for 2012 NFL passing statistics.</li>
<li>&quot;Knits&quot; a TeX file with embedded R that cleans the raw scraped data, produces a histogram of touchown passes for teams, and displays the teams with the least and greatest number of touchdowns.</li>
<li>Compiles the resulting TeX file and opens the resulting PDF.</li>
<li>Cleans up any temporary work files. <!--more--></li>
</ol>
<p>Here's what the pre-&quot;knitted&quot; LaTeX looks like with the embedded R:</p>
<div class='bogus-wrapper'>
<notextile>
<figure class='code'><figcaption>
<span></span>
</figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='latex'><span class='line'><span class="k">\documentclass</span><span class="nb">{</span>article<span class="nb">}</span>
</span><span class='line'><span class="k">\usepackage</span><span class="nb">{</span>graphicx<span class="nb">}</span>
</span><span class='line'><span class="c">%% begin.rcode setup, include=FALSE</span>
</span><span class='line'><span class="c">% opts_chunk$set(fig.path=&#39;figure/latex-&#39;, cache.path=&#39;cache/latex-&#39;)</span>
</span><span class='line'><span class="c">%% end.rcode</span>
</span><span class='line'><span class="k">\begin</span><span class="nb">{</span>document<span class="nb">}</span>
</span><span class='line'>
</span><span class='line'>After scraping data for all passing TDs in 2012, we get the following histogram for number of TD passes by team.
</span><span class='line'>
</span><span class='line'><span class="c">%% begin.rcode cache=TRUE</span>
</span><span class='line'><span class="c">% scrape &lt;- read.csv(&#39;scrape.csv&#39;)</span>
</span><span class='line'><span class="c">% raw_data &lt;- scrape[scrape[,&quot;X&quot;]!=&quot;&quot;,]</span>
</span><span class='line'><span class="c">% tds_for_passers &lt;- transform(raw_data[c(&quot;Tm&quot;,&quot;TD&quot;)], TD = as.numeric(as.character(TD)))</span>
</span><span class='line'><span class="c">% tds_for_teams &lt;- aggregate(tds_for_passers$TD, by=list(Team=tds_for_passers$Tm), FUN=sum)</span>
</span><span class='line'><span class="c">% hist(tds_for_teams$x)</span>
</span><span class='line'><span class="c">%% end.rcode</span>
</span><span class='line'>
</span><span class='line'>The teams with the greatest and least TDs:
</span><span class='line'>
</span><span class='line'><span class="c">%% begin.rcode</span>
</span><span class='line'><span class="c">% low_high &lt;- c(which.min(tds_for_teams$x), which.max(tds_for_teams$x))</span>
</span><span class='line'><span class="c">% tds_for_teams[low_high,&quot;Team&quot;]</span>
</span><span class='line'><span class="c">%% end.rcode</span>
</span><span class='line'>
</span><span class='line'><span class="k">\end</span><span class="nb">{</span>document<span class="nb">}</span>
</span></code></pre></td></tr></table></div></figure>
</notextile>
</div>

<p>You can comment out the line in the <code>factory</code> script that deletes the <code>tds2012-out.tex</code> file if you want to see what it looks like post-knit. The resulting TeX file basically contains a ton of new commonad definitions but the meat of it is what it does with your R code. It formats and displays the R code itself, and then it displays the output of the R code. Wherever the output is a graph, you'll see <code>\includegraphics[...]{...}</code>. knitr will do the R computation, render the graphics, create a <code>figures</code> subdirectory and store them there for the <code>\includegraphics</code> to reference. Whenever the output is simply text or mathematical expressions, you'll see the R output translated to pure LaTeX markup.</p>
<p>Pretty cool stuff!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Is it possible to be 15% Swedish?]]></title>
    <link href="http://legacy-blog.akgupta.ca/blog/2013/05/19/is-it-possible-to-be-15-percent-swedish/"/>
    <updated>2013-05-19T13:32:00-07:00</updated>
    <id>http://legacy-blog.akgupta.ca/blog/2013/05/19/is-it-possible-to-be-15-percent-swedish</id>
    <content type="html"><![CDATA[<p>This question came up as a joke during a team standup a few months ago. Although the obvious answer is &quot;no,&quot; if you're willing to play fast and loose with your metaphysics for a bit, the answer can be &quot;yes&quot; and there's a cute solution that ties together binary numbers and binary trees. This post itself is a bit of a joke in that it's just for fun, but it might be nice to see the familiar concepts of binary numbers and binary trees in a new light.</p>
<h2 id="the-obvious-answer-is-no">The obvious answer is &quot;no&quot;</h2>
<p>Let's quickly see why the real life answer is &quot;no.&quot; But first we should lay out the assumptions implicit in the problem. We're going to assume that at some point in time, everyone was either entirely Swedish or entirely non-Swedish. There's a chicken-and-egg problem that we're sweeping under the rug here, but that's what rugs are for. Next we're assuming that every person after that point in time has their Swedishness wholly and equally determined by their parents Swedishness. So if mom is 17% Swedish and dad is 66% Swedish, then baby is ½ x 17% + ½ x 66% = 41.5% Swedish. <!--more--></p>
<p>So why is 15% impossible? Or, for that matter, all the numbers in the previous example: 17%, 66%, 41.5%? The reason is that any person's Swedishness must be a fraction which, in lowest terms, must have a denominator that is a power of 2. There's an easy proof by induction. Initially everyone is either entirely Swedish or entirely non-Swedish. In lowest terms these fractions can be expressed as 1/1 and 0/1, respectively. The denominator, 1, is a power of 2 (fyi <span class="math">2<sup>0</sup> = 1</span>). Now, assuming a mom and dad are Swedish in proportions <span class="math"><em>m</em> / 2<sup><em>M</em></sup></span> and <span class="math"><em>d</em> / 2<sup><em>D</em></sup></span> respectively, their offspring will be this Swedish:</p>
<p><br /><span class="math">$\frac{2^Dm + 2^Md}{2^{D+M+2}}$</span><br /></p>
<p>The denominator is a power of 2, and reducing this fraction to lower terms will not change that fact. Numbers like 15%, a.k.a. 15/100, or 3/20 in lowest terms, have denominators which aren't powers of 2, and that's why no one can ever really be 15% Swedish.</p>
<h2 id="but-what-if...">But what if...?</h2>
<p>What if we keep the assumption that Swedishness is determined equally by the parents' Swedishnesses, but without assuming there was some point in time where everyone was either entirely Swedish or entirely non-Swedish? Let's weaken that assumption to simply state that every person has an ancestor that's either entirely Swedish or entirely non-Swedish. And let's do one more crazy thing: let's allow human history to go back infinitely through the generations, with no beginning. So there could be an infinitely long lineage of Swedes without there being a first Swede. If it helps, imagine a family tree that's infinitely tall, with no original top level. In this universe of bastardized metaphysics, can you be 15% Swedish? Why yes!</p>
<h2 id="binary-numbers-and-trees">Binary numbers and trees</h2>
<p>We know how decimal numbers work. 12.34 as a decimal number means</p>
<p><br /><span class="math">1 × 10<sup>1</sup> + 2 × 10<sup>0</sup> + 3 × 10<sup> − 1</sup> + 4 × 10<sup> − 2</sup></span><br /></p>
<p>Binary numbers work the same way, with 2's instead of 10's. So the number four is:</p>
<p><br /><span class="math">1 × 2<sup>2</sup> + 0 × 2<sup>1</sup> + 0 × 2<sup>0</sup></span><br /></p>
<p>So it's represented as <span class="math">100</span> in binary. Similarly one-half is:</p>
<p><br /><span class="math">0 × 2<sup>0</sup> + 1 × 2<sup> − 1</sup></span><br /></p>
<p>So it's represented as <span class="math">0. 1</span> in binary. What about a number like one-third? It's equal to the value of the following infinite sum:</p>
<p><br /><span class="math">0 × 10<sup>0</sup> + 3 × 10<sup> − 1</sup> + 3 × 10<sup> − 2</sup> + …</span><br /></p>
<p>So it's represented as <span class="math">0. 33. . . </span> in decimal. It's also equal to the following infinite sum:</p>
<p><br /><span class="math">0 × 2<sup>0</sup> + 0 × 2<sup> − 1</sup> + 1 × 2 − 2 + 0 × 2<sup> − 3</sup> + 1 × 2<sup> − 4</sup> + 0 × 2<sup> − 5</sup> + 1 × 2<sup> − 6</sup> + …</span><br /></p>
<p>So it's represented as <span class="math">0. 010101. . . </span> in binary.</p>
<p>Now why do we care? Well, if you've read this far, then you care because you can use the binary representation of a number to figure out what a person's family tree could look like if their Swedishness was equal to that number. For example, how can you be <span class="math">1 / 2</span> Swedish? Well <span class="math">0. 1</span> is the binary representation of <span class="math">1 / 2</span>, and this tells us that if we have 1 parent who is entirely Swedish (and hence all the ancestors on that side are entirely Swedish), and one parent who is entirely non-Swedish (along with all their ancestors), then you can be 1/2 Swedish.</p>
<p>How about a more involved example. To be <span class="math">3 / 16</span> Swedish, which is <span class="math">0. 0011</span> in binary, you can accomplish this by first having 1 great-grandparent who is entirely Swedish, let's call her Agnetha. Agnetha's parents will of course have to be entirley Swedish too. In addition to them you'll need one more great-great-grandparent who's entirley Swedish, let's call him Bjorn. If you have great-grandma Agnetha and great-great-grandpa Bjorn who are entirely Swedish (as must be all their ancestors), and if all of your ancestors who aren't descendents of Agnetha and Bjorn are entirely non-Swedish, then you'll be exactly <span class="math">3 / 16</span> Swedish. How does this look in terms of your family tree? If we say you are at level 0, your parents at level 1, etc. then what we get is the following:</p>
<p>The first full Swede is Agnetha, on level 3.<br />The next full Swede who isn't logically &quot;forced&quot; to be Swedish on account of being Agnetha's ancestor is Bjorn, on level 4.<br />There are no other full Swedes except Agnetha's and Bjorn's ancestors.<br />Everyone else is entirely non-Swedish unless they're &quot;forced&quot; to be a bit Swedish on account of being descendents of Agnetha and/or Bjorn.</p>
<p>Notice how the &quot;level 3&quot; and &quot;level 4&quot; correspond to the locations of the 1's in the binary expansion of 3/16? If you go back to the simpler example of 1/2, which was <span class="math">0. 1</span> in binary, you'll see that we have one full Swede on level 1 and everyone except that person's ancestors is fully non-Swedish.</p>
<h2 id="putting-it-all-together">Putting it all together</h2>
<p>So here's how you can be 15% Swedish:</p>
<ol type="1">
<li>Express 15% in binary, it'll be infinitely long.</li>
<li>Use the binary number as a recipe for marking the certain nodes at certain levels of an infinite binary (family) tree as &quot;entirely Swedish&quot;.</li>
<li>Any ancestor of one of the marked nodes also gets marked as &quot;entirely Swedish&quot;, and any node that's not an ancestor or descendent of a marked node is entirely non-Swedish. Every remaining node is Swedish to the degree determined by its parents.</li>
<li>The person at the root of this family tree will be the desired 15% Swedish.</li>
</ol>
<p><br /><span class="math">15% = 2<sup> − 3</sup> + 2<sup> − 6</sup> + 2<sup> − 7</sup> + 2<sup> − 10</sup> + …</span><br /></p>
<p>So if you have great-grandma Agnetha, great-great-great-great-grandpa Bjorn, great-great-great-great-great-granpa Benny, and great-great-great-great-great-great-great-great-grandma Anni-Frid, .... And all of them are entirely Swedish, and none of them are ancestors/descendents of one another. And if anyone else on your family tree that isn't a blood relative of theirs is entirely non-Swedish. Then you will be 15% Swedish!</p>
<h2 id="back-to-real-life-sort-of">Back to real life, sort of</h2>
<p>Okay, so all that was incredibly silly. Can we say anything that's merely very silly? Say you want to know if you can be 15% Swedish in real life, but within some error bounds. Maybe you want to know if you can be 15% Swedish, give or take 1%. Easy: find a <em>finitely-long</em> binary number that's between 0.14 and 0.16, and repeat the above steps with that number. One simple way to do that is to start finding the binary expansion of 0.15, and stopping once you're within the desired range:</p>
<p><span class="math">2<sup> − 3</sup></span>?<br />Nope, that's 0.125, too small.<br /><span class="math">2<sup> − 3</sup> + 2<sup> − 6</sup></span>?<br />Yup, that's 0.140625.</p>
<p>Could we have known ahead of time how much of the binary expansion of 0.15 we'd have to calculate before reaching the desired range? Yup, we can do that too. Once you've started writing a binary number out to <span class="math"><em>n</em></span> digits, no matter what digits you add on next, the most you can add to your current number is <span class="math">2<sup> − <em>n</em></sup></span>. For example, all the binary numbers that start with <span class="math">0. 11010. . . </span> must be within <span class="math">2<sup> − 5</sup> = 0. 03125</span> of one another. So if I know I want to be within <span class="math">0. 01</span> (in decimal, i.e. 1%) of 15%, I just have to apply the above reasoning backwards. <span class="math">log<sub>2</sub>(0. 01)  − 4. 605. . . </span> so if I figure things out back more than 4.605 generations, that's enough. So I really only need to figure things out 5 generations back. 5 generations back I have 32 ancestors. The closest fraction of the form x/32 to 0.15 is 5/32. So I know that if I have exactly 5 totally Swedish level-5 ancestors and the remaining 27 level-5 ancestors are totally non-Swedish, I will be within 1% of being 15% Swedish (I'll be 15.625% Swedish to be exact).</p>
<figure>
<img src="http://images3.wikia.nocookie.net/__cb20080726160313/muppet/images/thumb/3/34/Swedishchef-myspace.jpg/300px-Swedishchef-myspace.jpg" />
</figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[So you still don't understand Hindley-Milner?  Part 1]]></title>
    <link href="http://legacy-blog.akgupta.ca/blog/2013/05/14/so-you-still-dont-understand-hindley-milner/"/>
    <updated>2013-05-14T01:12:00-07:00</updated>
    <id>http://legacy-blog.akgupta.ca/blog/2013/05/14/so-you-still-dont-understand-hindley-milner</id>
    <content type="html"><![CDATA[<p>I was out for drinks with <a href="https://twitter.com/starbuxman">Josh Long</a> and some other friends from work, when he found out I &quot;speak math.&quot; He had come across <a href="http://stackoverflow.com/questions/12532552/what-part-of-milner-hindley-do-you-not-understand">this StackOverflow question</a> and asked me what it meant:</p>
<p><img src="http://i.stack.imgur.com/hZhjl.png" /><br /><br></p>
<p>Before we figure out what it means, let's get an idea for why we care in the first place. <a href="http://www.codecommit.com/blog/scala/what-is-hindley-milner-and-why-is-it-cool">Daniel Spiewak's blog post</a> gives a really nice explanation of the purpose of the HM algorithm, in addition to an in-depth example of its application:</p>
<blockquote>
<p>Functionally speaking, Hindley-Milner (or “Damas-Milner”) is an algorithm for inferring value types based on use.  It literally formalizes the intuition that a type can be deduced by the functionality it supports.</p>
</blockquote>
<p>Okay, so we want to formalize an algorithm for inferring types of any given expression. In this post, I'm going to touch on what it means to formalize something, then describe the building blocks of the HM formalization. In <a href="http://legacy-blog.akgupta.ca/blog/2013/06/07/so-you-still-dont-understand-hindley-milner-part-2/">Part 2</a>, I'll flesh out the building blocks of the formalization. Finally in <a href="http://legacy-blog.akgupta.ca/blog/2013/06/07/so-you-still-dont-understand-hindley-milner-part-3/">Part 3</a>, I'll translate that StackOverflow question.<br /><!--more--></p>
<h2 id="what-it-means-to-formalize">What it means to formalize</h2>
<p>Okay, so we want to talk about expressions. Arbitrary expressions. In an arbitrary language. And we want to talk about inferring types of these expressions. And we want to figure out rules for how we can infer types. And then we're going to want to make an algorithm that uses these rules to infer types. So we're going to need a meta-language. A language to talk about expressions in an arbitrary programming language. This meta-language should:</p>
<ul>
<li>Be abstract and generic, so that it allows us to reason about statements of type inference purely based on their <em>form</em> (hence, <em>formalization</em>), without having to worry about their content.</li>
<li>Give a precise, unambiguous, yet intuitive definition for what an expression is.</li>
<li>Give those definitions in terms of a small number of uncontroversial primitive concepts.</li>
<li>Similarly give definitions for types, the idea that an expression has a type, and the idea that we can infer that a given expression has a given type.</li>
<li>Lend itself to a simple, terse symbolic representation, e.g. rather than saying &quot;the expression formed by applying the first expression to the second expression has the type of a function from strings to some type we don't care to specify in the current context&quot; we could simply say &quot;<span class="math"><em>e</em><sub>1</sub>(<em>e</em><sub>2</sub>): String → <em>t</em></span>&quot;.</li>
<li>Be easily translated to something a computer can understand and implement, so we can ultimately automate type inference.</li>
</ul>
<p>To make all that a little more concrete, let's look at a really quick example of a formalization. If, instead of formalizing a language for talking about inferring types of expressions in an arbitrary programming language, what if we wanted to formalize a language for talking about truths of sentences in arbitrary natural languages? Without formalization, we might say something like</p>
<blockquote>
<p>Suppose I know that if it's raining, Bob will carry an umbrella.<br />And suppose I also know that it's raining.<br />Then, I can conclude that Bob will carry an umbrella.</p>
<p>And any argument that takes this form is a valid way to reason.</p>
</blockquote>
<p>Propositional Calculus formalizes that whole things as a rule known as Modus Ponens:</p>
<p><br /><span class="math">$\underline{A,\ \ A \rightarrow B}$</span><br /> <br /><span class="math"><em>B</em></span><br /></p>
<p>where <span class="math"><em>A</em></span> and <span class="math"><em>B</em></span> are variables representing propositions (a.k.a. sentences or clauses) in an arbitrary natural language.</p>
<p>Okay, so let's enumerate the building blocks of the HM formalization:</p>
<h2 id="building-blocks-of-the-formalization">Building blocks of the formalization</h2>
<p>We will need:</p>
<ol type="1">
<li>A formal way to talk about expressions. This formalization should meet the criteria enumerated above; for this purpose we use the <strong>Lambda Calculus</strong>. I'll be explaining that in a minute, but there's nothing crazy going on here.</li>
<li>A formal way to talk about types, and a formal way to talk about expressions and types together. After all, the purpose of the HM algorithm is to be able to deduce statements of the form &quot;expression <span class="math"><em>e</em></span> has type <span class="math"><em>t</em></span>&quot;.</li>
<li>A formal set of rules for deriving statements about expression types from other such statements. Rules along the lines of: &quot;if I can already demonstrate that some expression has this type, and another expression has that type, then this third expression has this other type&quot;. <em>Such a set of rules is exactly what you're seeing in that SO question</em>. I'll be translating this in full detail.</li>
<li>An algorithm that intelligently uses the deduction rules to get from a starting point to deducing/inferring a desired conclusion statement: &quot;the expression <span class="math"><em>e</em></span> that I'm interested in has type <span class="math"><em>t</em></span>&quot;. This is the &quot;algorithm&quot; part for the &quot;HM algorithm&quot;, and that's not something I'll be going into in these posts.</li>
</ol>
<p>Onward, ho!</p>
<ul>
<li><a href="http://legacy-blog.akgupta.ca/blog/2013/06/07/so-you-still-dont-understand-hindley-milner-part-2/">Part 2</a>, wherein we thoroughly define points 1 and 2 above, and demystify the mathematical syntax.</li>
<li><a href="http://legacy-blog.akgupta.ca/blog/2013/06/07/so-you-still-dont-understand-hindley-milner-part-3/">Part 3</a>, wherein we translate the type inference rules in point 3 above.</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up PostgreSQL with MacPorts for Ruby on Rails development]]></title>
    <link href="http://legacy-blog.akgupta.ca/blog/2013/05/11/setting-up-postgresql-with-macports-for-ruby-on-rails-development/"/>
    <updated>2013-05-11T13:39:00-07:00</updated>
    <id>http://legacy-blog.akgupta.ca/blog/2013/05/11/setting-up-postgresql-with-macports-for-ruby-on-rails-development</id>
    <content type="html"><![CDATA[<p>This post is pretty much just what the title says. If you develop in Rails, on a Mac, using PostgreSQL as your database and MacPorts as your package management system of choice, it can be hard to get everything set up and going. This is especially true if you're new to absolutely everything, which was my situation when I first tried to do this. Part of what was hard was that most of the advice on the Internet was just a bunch of commands to run with little explanation, so it was hard to know what you had to do to customize it for your environment. So this explanation is hopefully a little more thorough. However, if you're impatient and just want the <strong>TL;DR</strong>, here it is (with several implicit assumptions):</p>
<div class='bogus-wrapper'>
<notextile>
<figure class='code'><figcaption>
<span></span>
</figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo port install postgresql92-server
</span><span class='line'>sudo mkdir -p /opt/local/var/db/postgresql92/defaultdb
</span><span class='line'>sudo chown postgres:postgres /opt/local/var/db/postgresql92/defaultdb
</span><span class='line'>sudo su postgres -c <span class="s1">&#39;/opt/local/lib/postgresql92/bin/initdb -D /opt/local/var/db/postgresql92/defaultdb&#39;</span>
</span><span class='line'>sudo su postgres
</span><span class='line'>/opt/local/lib/postgresql92/bin/pg_ctl -D /opt/local/var/db/postgresql92/defaultdb/ -l /opt/local/var/db/postgresql92/defaultdb/server.log start
</span><span class='line'><span class="nb">exit</span>
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;PATH=/opt/local/lib/postgresql92/bin/:$PATH&#39;</span> &gt;&gt; ~/.bashrc
</span><span class='line'><span class="nb">source</span> ~/.bashrc
</span><span class='line'>rails new my_app --database<span class="o">=</span>postgresql
</span><span class='line'>sed -e <span class="s1">&#39;s/username: my_app/username: postgres/g&#39;</span> -i <span class="s1">&#39;&#39;</span> my_app/config/database.yml
</span><span class='line'><span class="nb">cd </span>my_app
</span><span class='line'>rake db:create:all
</span></code></pre></td></tr></table></div></figure>
</notextile>
</div>
<!--more-->
<p>In order to use a PostgreSQL database for development, you'll need, in addition to the PostgreSQL package itself, a PostgreSQL server for your application to talk to. The PostgreSQL server package has the basic PostgreSQL package as a dependency, so we'll just run the command to install the server and we'll get both. The <strong>server</strong> package will allow you to run a process that serves your database, and the basic package provides a <strong>client</strong> that your Rails app will use to connect to and interact with (read, write, etc.) the database being served.</p>
<p>Pick the version of PostgreSQL you want to install. At the time I wrote this, the latest was 9.2.x so we'll go with that:</p>
<div class='bogus-wrapper'>
<notextile>
<figure class='code'><figcaption>
<span></span>
</figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo port install postgresql92-server
</span></code></pre></td></tr></table></div></figure>
</notextile>
</div>

<p>You'll likely see the following instructions in the installation output</p>
<div class='bogus-wrapper'>
<notextile>
<figure class='code'><figcaption>
<span></span>
</figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>To create a database instance, after install <span class="k">do</span>
</span><span class='line'><span class="k"> </span>sudo mkdir -p /opt/local/var/db/postgresql92/defaultdb
</span><span class='line'> sudo chown postgres:postgres /opt/local/var/db/postgresql92/defaultdb
</span><span class='line'> sudo su postgres -c <span class="s1">&#39;/opt/local/lib/postgresql92/bin/initdb -D</span>
</span><span class='line'><span class="s1">/opt/local/var/db/postgresql92/defaultdb&#39;</span>
</span></code></pre></td></tr></table></div></figure>
</notextile>
</div>

<p>Now in order to start a PostgreSQL server process, it needs an initial database cluster within which you will create your databases. To do this you need to create a directory for an initial database cluster and tell PostgreSQL to initialize that directory for use with a PostgreSQL database cluster. PostgreSQL doesn't allow the superuser to initialize a database cluster. The user used to initialize the database cluster should be one that will exist on any machine that has PostgreSQL, allowing you to collaborate on your Rails app with people using different machines, thus it makes sense to use the 'postgres' user. The above commands will:</p>
<ol type="1">
<li>Create the directory for an initial default database cluster</li>
<li>Change ownership of the directory to the 'postgres' user</li>
<li>Initializes the directory as a PostgreSQL database cluster on behalf of the 'postgres' user.</li>
</ol>
<p>After you do this, you'll see the following instructions in the output:</p>
<div class='bogus-wrapper'>
<notextile>
<figure class='code'><figcaption>
<span></span>
</figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Success. You can now start the database server using:
</span><span class='line'>
</span><span class='line'>    /opt/local/lib/postgresql92/bin/postgres -D /opt/local/var/db/postgresql92/defaultdb
</span><span class='line'>or
</span><span class='line'>    /opt/local/lib/postgresql92/bin/pg_ctl -D /opt/local/var/db/postgresql92/defaultdb -l logfile start
</span></code></pre></td></tr></table></div></figure>
</notextile>
</div>

<p>The first will start the server in the foreground, which you probably don't want. The second will start it in the background, but dump a log file in whatever directory you execute the command, which you don't want either. You'll also need to start the server as the 'postgres' user, which the above command doesn't do as is, so the solution is to:</p>
<ol type="1">
<li>Switch to the 'postgres' user</li>
<li>Issue the above command (with a better path for the log file)</li>
<li>Exit from being the 'postgres' user</li>
</ol>
<div class='bogus-wrapper'>
<notextile>
<figure class='code'><figcaption>
<span></span>
</figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo su postgres
</span><span class='line'>/opt/local/lib/postgresql92/bin/pg_ctl -D /opt/local/var/db/postgresql92/defaultdb/ -l /opt/local/var/db/postgresql92/defaultdb/server.log start
</span><span class='line'><span class="nb">exit</span>
</span></code></pre></td></tr></table></div></figure>
</notextile>
</div>

<p>Now when you go to create your Rails project, it will install the <code>pg</code> gem for working with PostgreSQL, and it'll configure itself to use the first <code>psql</code> (PostgreSQL client) it finds in your <code>$PATH</code> environment variable. Your system comes with one, but you'll want to use the one you just installed. Assuming you're using a <code>.bashrc</code> (or <code>.bash_profile</code>) file for initial setup of your bash environment for shell sessions, add</p>
<div class='bogus-wrapper'>
<notextile>
<figure class='code'><figcaption>
<span></span>
</figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">PATH</span><span class="o">=</span>/opt/local/lib/postgresql92/bin/:<span class="nv">$PATH</span>
</span></code></pre></td></tr></table></div></figure>
</notextile>
</div>

<p>to the bottom of the <code>.bashrc</code> (or <code>.bash_profile</code>) file. Don't forget to</p>
<div class='bogus-wrapper'>
<notextile>
<figure class='code'><figcaption>
<span></span>
</figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">source</span> ~/.bashrc
</span></code></pre></td></tr></table></div></figure>
</notextile>
</div>

<p>for the change to take effect.</p>
<p>Now that you're done setting up your system for PostgreSQL, you are ready to create and setup a Rails app that uses PostgreSQL. Start with:</p>
<div class='bogus-wrapper'>
<notextile>
<figure class='code'><figcaption>
<span></span>
</figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails new my_app --database<span class="o">=</span>postgresql
</span></code></pre></td></tr></table></div></figure>
</notextile>
</div>

<p>The standard <code>rails new my_app</code> does a whole bunch of initial setup and file creation for your Rails app. Adding the <code>--database=postgresql</code> flag ensures that your Rails setup includes some PostgreSQL-specific things, such as adding the <code>pg</code> gem to your Gemfile, and pre-populating some of the database configuration properties in the <code>my_app/config/database.yml</code> file. We'll need to edit that file a little. Go to <code>my_app/config/database.yml</code> and change the username for the development and test databases to 'postgres'. What this does is ensure that when your Rails app uses the PostgreSQL client to try to access the database cluster served by your PostgreSQL server, it does so with the credentials of the user who owns that cluster, namely the 'postgres' user.</p>
<p>While you're in that file, you can get rid of the section for the production database altogether if you're deploying to Cloud Foundry or Heroku, since they will overwrite whatever you have there anyways.</p>
<p>Finally, create the development and test databases that your Rails app will use. (These databases will be created within your default cluster).</p>
<div class='bogus-wrapper'>
<notextile>
<figure class='code'><figcaption>
<span></span>
</figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake db:create:all
</span></code></pre></td></tr></table></div></figure>
</notextile>
</div>

<p>Now you're totally ready to go!</p>
]]></content>
  </entry>
  
</feed>
